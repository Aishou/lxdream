/**
 * $Id$
 * 
 * SH4 => x86 translation. This version does no real optimization, it just
 * outputs straight-line x86 code - it mainly exists to provide a baseline
 * to test the optimizing versions against.
 *
 * Copyright (c) 2007 Nathan Keynes.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 */

#include <assert.h>
#include <math.h>

#ifndef NDEBUG
#define DEBUG_JUMPS 1
#endif

#include "lxdream.h"
#include "sh4/xltcache.h"
#include "sh4/sh4core.h"
#include "sh4/sh4trans.h"
#include "sh4/sh4stat.h"
#include "sh4/sh4mmio.h"
#include "sh4/x86op.h"
#include "clock.h"

#define DEFAULT_BACKPATCH_SIZE 4096

struct backpatch_record {
    uint32_t fixup_offset;
    uint32_t fixup_icount;
    int32_t exc_code;
};

#define DELAY_NONE 0
#define DELAY_PC 1
#define DELAY_PC_PR 2

/** 
 * Struct to manage internal translation state. This state is not saved -
 * it is only valid between calls to sh4_translate_begin_block() and
 * sh4_translate_end_block()
 */
struct sh4_x86_state {
    int in_delay_slot;
    gboolean priv_checked; /* true if we've already checked the cpu mode. */
    gboolean fpuen_checked; /* true if we've already checked fpu enabled. */
    gboolean branch_taken; /* true if we branched unconditionally */
    gboolean double_prec; /* true if FPU is in double-precision mode */
    gboolean double_size; /* true if FPU is in double-size mode */
    gboolean sse3_enabled; /* true if host supports SSE3 instructions */
    uint32_t block_start_pc;
    uint32_t stack_posn;   /* Trace stack height for alignment purposes */
    int tstate;

    /* mode flags */
    gboolean tlb_on; /* True if tlb translation is active */

    /* Allocated memory for the (block-wide) back-patch list */
    struct backpatch_record *backpatch_list;
    uint32_t backpatch_posn;
    uint32_t backpatch_size;
};

#define TSTATE_NONE -1
#define TSTATE_O    0
#define TSTATE_C    2
#define TSTATE_E    4
#define TSTATE_NE   5
#define TSTATE_G    0xF
#define TSTATE_GE   0xD
#define TSTATE_A    7
#define TSTATE_AE   3

#ifdef ENABLE_SH4STATS
#define COUNT_INST(id) load_imm32(R_EAX,id); call_func1(sh4_stats_add, R_EAX); sh4_x86.tstate = TSTATE_NONE
#else
#define COUNT_INST(id)
#endif

/** Branch if T is set (either in the current cflags, or in sh4r.t) */
#define JT_rel8(label) if( sh4_x86.tstate == TSTATE_NONE ) { \
	CMP_imm8s_sh4r( 1, R_T ); sh4_x86.tstate = TSTATE_E; } \
    OP(0x70+sh4_x86.tstate); MARK_JMP8(label); OP(-1)

/** Branch if T is clear (either in the current cflags or in sh4r.t) */
#define JF_rel8(label) if( sh4_x86.tstate == TSTATE_NONE ) { \
	CMP_imm8s_sh4r( 1, R_T ); sh4_x86.tstate = TSTATE_E; } \
    OP(0x70+ (sh4_x86.tstate^1)); MARK_JMP8(label); OP(-1)

static struct sh4_x86_state sh4_x86;

static uint32_t max_int = 0x7FFFFFFF;
static uint32_t min_int = 0x80000000;
static uint32_t save_fcw; /* save value for fpu control word */
static uint32_t trunc_fcw = 0x0F7F; /* fcw value for truncation mode */

gboolean is_sse3_supported()
{
    uint32_t features;
    
    __asm__ __volatile__(
        "mov $0x01, %%eax\n\t"
        "cpuid\n\t" : "=c" (features) : : "eax", "edx", "ebx");
    return (features & 1) ? TRUE : FALSE;
}

void sh4_translate_init(void)
{
    sh4_x86.backpatch_list = malloc(DEFAULT_BACKPATCH_SIZE);
    sh4_x86.backpatch_size = DEFAULT_BACKPATCH_SIZE / sizeof(struct backpatch_record);
    sh4_x86.sse3_enabled = is_sse3_supported();
}


static void sh4_x86_add_backpatch( uint8_t *fixup_addr, uint32_t fixup_pc, uint32_t exc_code )
{
    if( sh4_x86.backpatch_posn == sh4_x86.backpatch_size ) {
	sh4_x86.backpatch_size <<= 1;
	sh4_x86.backpatch_list = realloc( sh4_x86.backpatch_list, 
					  sh4_x86.backpatch_size * sizeof(struct backpatch_record));
	assert( sh4_x86.backpatch_list != NULL );
    }
    if( sh4_x86.in_delay_slot ) {
	fixup_pc -= 2;
    }
    sh4_x86.backpatch_list[sh4_x86.backpatch_posn].fixup_offset = 
	((uint8_t *)fixup_addr) - ((uint8_t *)xlat_current_block->code);
    sh4_x86.backpatch_list[sh4_x86.backpatch_posn].fixup_icount = (fixup_pc - sh4_x86.block_start_pc)>>1;
    sh4_x86.backpatch_list[sh4_x86.backpatch_posn].exc_code = exc_code;
    sh4_x86.backpatch_posn++;
}

/**
 * Emit an instruction to load an SH4 reg into a real register
 */
static inline void load_reg( int x86reg, int sh4reg ) 
{
    /* mov [bp+n], reg */
    OP(0x8B);
    OP(0x45 + (x86reg<<3));
    OP(REG_OFFSET(r[sh4reg]));
}

static inline void load_reg16s( int x86reg, int sh4reg )
{
    OP(0x0F);
    OP(0xBF);
    MODRM_r32_sh4r(x86reg, REG_OFFSET(r[sh4reg]));
}

static inline void load_reg16u( int x86reg, int sh4reg )
{
    OP(0x0F);
    OP(0xB7);
    MODRM_r32_sh4r(x86reg, REG_OFFSET(r[sh4reg]));

}

#define load_spreg( x86reg, regoff ) MOV_sh4r_r32( regoff, x86reg )
#define store_spreg( x86reg, regoff ) MOV_r32_sh4r( x86reg, regoff )
/**
 * Emit an instruction to load an immediate value into a register
 */
static inline void load_imm32( int x86reg, uint32_t value ) {
    /* mov #value, reg */
    OP(0xB8 + x86reg);
    OP32(value);
}

/**
 * Load an immediate 64-bit quantity (note: x86-64 only)
 */
static inline void load_imm64( int x86reg, uint64_t value ) {
    /* mov #value, reg */
    REXW();
    OP(0xB8 + x86reg);
    OP64(value);
}

/**
 * Emit an instruction to store an SH4 reg (RN)
 */
void static inline store_reg( int x86reg, int sh4reg ) {
    /* mov reg, [bp+n] */
    OP(0x89);
    OP(0x45 + (x86reg<<3));
    OP(REG_OFFSET(r[sh4reg]));
}

/**
 * Load an FR register (single-precision floating point) into an integer x86
 * register (eg for register-to-register moves)
 */
#define load_fr(reg,frm)  OP(0x8B); MODRM_r32_ebp32(reg, REG_OFFSET(fr[0][(frm)^1]) )
#define load_xf(reg,frm)  OP(0x8B); MODRM_r32_ebp32(reg, REG_OFFSET(fr[1][(frm)^1]) )

/**
 * Load the low half of a DR register (DR or XD) into an integer x86 register 
 */
#define load_dr0(reg,frm) OP(0x8B); MODRM_r32_ebp32(reg, REG_OFFSET(fr[frm&1][frm|0x01]) )
#define load_dr1(reg,frm) OP(0x8B); MODRM_r32_ebp32(reg, REG_OFFSET(fr[frm&1][frm&0x0E]) )

/**
 * Store an FR register (single-precision floating point) from an integer x86+
 * register (eg for register-to-register moves)
 */
#define store_fr(reg,frm) OP(0x89); MODRM_r32_ebp32( reg, REG_OFFSET(fr[0][(frm)^1]) )
#define store_xf(reg,frm) OP(0x89); MODRM_r32_ebp32( reg, REG_OFFSET(fr[1][(frm)^1]) )

#define store_dr0(reg,frm) OP(0x89); MODRM_r32_ebp32( reg, REG_OFFSET(fr[frm&1][frm|0x01]) )
#define store_dr1(reg,frm) OP(0x89); MODRM_r32_ebp32( reg, REG_OFFSET(fr[frm&1][frm&0x0E]) )


#define push_fpul()  FLDF_sh4r(R_FPUL)
#define pop_fpul()   FSTPF_sh4r(R_FPUL)
#define push_fr(frm) FLDF_sh4r( REG_OFFSET(fr[0][(frm)^1]) )
#define pop_fr(frm)  FSTPF_sh4r( REG_OFFSET(fr[0][(frm)^1]) )
#define push_xf(frm) FLDF_sh4r( REG_OFFSET(fr[1][(frm)^1]) )
#define pop_xf(frm)  FSTPF_sh4r( REG_OFFSET(fr[1][(frm)^1]) )
#define push_dr(frm) FLDD_sh4r( REG_OFFSET(fr[0][(frm)&0x0E]) )
#define pop_dr(frm)  FSTPD_sh4r( REG_OFFSET(fr[0][(frm)&0x0E]) )
#define push_xdr(frm) FLDD_sh4r( REG_OFFSET(fr[1][(frm)&0x0E]) )
#define pop_xdr(frm)  FSTPD_sh4r( REG_OFFSET(fr[1][(frm)&0x0E]) )



/* Exception checks - Note that all exception checks will clobber EAX */

#define check_priv( ) \
    if( !sh4_x86.priv_checked ) { \
	sh4_x86.priv_checked = TRUE;\
	load_spreg( R_EAX, R_SR );\
	AND_imm32_r32( SR_MD, R_EAX );\
	if( sh4_x86.in_delay_slot ) {\
	    JE_exc( EXC_SLOT_ILLEGAL );\
	} else {\
	    JE_exc( EXC_ILLEGAL );\
	}\
	sh4_x86.tstate = TSTATE_NONE; \
    }\

#define check_fpuen( ) \
    if( !sh4_x86.fpuen_checked ) {\
	sh4_x86.fpuen_checked = TRUE;\
	load_spreg( R_EAX, R_SR );\
	AND_imm32_r32( SR_FD, R_EAX );\
	if( sh4_x86.in_delay_slot ) {\
	    JNE_exc(EXC_SLOT_FPU_DISABLED);\
	} else {\
	    JNE_exc(EXC_FPU_DISABLED);\
	}\
	sh4_x86.tstate = TSTATE_NONE; \
    }

#define check_ralign16( x86reg ) \
    TEST_imm32_r32( 0x00000001, x86reg ); \
    JNE_exc(EXC_DATA_ADDR_READ)

#define check_walign16( x86reg ) \
    TEST_imm32_r32( 0x00000001, x86reg ); \
    JNE_exc(EXC_DATA_ADDR_WRITE);

#define check_ralign32( x86reg ) \
    TEST_imm32_r32( 0x00000003, x86reg ); \
    JNE_exc(EXC_DATA_ADDR_READ)

#define check_walign32( x86reg ) \
    TEST_imm32_r32( 0x00000003, x86reg ); \
    JNE_exc(EXC_DATA_ADDR_WRITE);

#define check_ralign64( x86reg ) \
    TEST_imm32_r32( 0x00000007, x86reg ); \
    JNE_exc(EXC_DATA_ADDR_READ)

#define check_walign64( x86reg ) \
    TEST_imm32_r32( 0x00000007, x86reg ); \
    JNE_exc(EXC_DATA_ADDR_WRITE);

#define UNDEF(ir)
#define MEM_RESULT(value_reg) if(value_reg != R_EAX) { MOV_r32_r32(R_EAX,value_reg); }
#define MEM_READ_BYTE( addr_reg, value_reg ) call_func1(sh4_read_byte, addr_reg ); MEM_RESULT(value_reg)
#define MEM_READ_WORD( addr_reg, value_reg ) call_func1(sh4_read_word, addr_reg ); MEM_RESULT(value_reg)
#define MEM_READ_LONG( addr_reg, value_reg ) call_func1(sh4_read_long, addr_reg ); MEM_RESULT(value_reg)
#define MEM_WRITE_BYTE( addr_reg, value_reg ) call_func2(sh4_write_byte, addr_reg, value_reg)
#define MEM_WRITE_WORD( addr_reg, value_reg ) call_func2(sh4_write_word, addr_reg, value_reg)
#define MEM_WRITE_LONG( addr_reg, value_reg ) call_func2(sh4_write_long, addr_reg, value_reg)

#ifdef HAVE_FRAME_ADDRESS
/**
 * Perform MMU translation on the address in addr_reg for a read operation, iff the TLB is turned 
 * on, otherwise do nothing. Clobbers EAX, ECX and EDX. May raise a TLB exception or address error.
 */
#define MMU_TRANSLATE_READ( addr_reg ) if( sh4_x86.tlb_on ) {  call_func1_exc(mmu_vma_to_phys_read, addr_reg, pc); MEM_RESULT(addr_reg); }

/**
 * Perform MMU translation on the address in addr_reg for a write operation, iff the TLB is turned 
 * on, otherwise do nothing. Clobbers EAX, ECX and EDX. May raise a TLB exception or address error.
 */
#define MMU_TRANSLATE_WRITE( addr_reg ) if( sh4_x86.tlb_on ) { call_func1_exc(mmu_vma_to_phys_write, addr_reg, pc); MEM_RESULT(addr_reg); }
#else
#define MMU_TRANSLATE_READ( addr_reg ) if( sh4_x86.tlb_on ) { call_func1(mmu_vma_to_phys_read, addr_reg); CMP_imm32_r32(MMU_VMA_ERROR, R_EAX); JE_exc(-1); MEM_RESULT(addr_reg); }
#define MMU_TRANSLATE_WRITE( addr_reg ) if( sh4_x86.tlb_on ) { call_func1(mmu_vma_to_phys_write, addr_reg); CMP_imm32_r32(MMU_VMA_ERROR, R_EAX); JE_exc(-1); MEM_RESULT(addr_reg); }
#endif

#define SLOTILLEGAL() JMP_exc(EXC_SLOT_ILLEGAL); sh4_x86.in_delay_slot = DELAY_NONE; return 1;

/****** Import appropriate calling conventions ******/
#if SIZEOF_VOID_P == 8
#include "sh4/ia64abi.h"
#else /* 32-bit system */
#include "sh4/ia32abi.h"
#endif

void sh4_translate_begin_block( sh4addr_t pc ) 
{
    enter_block();
    sh4_x86.in_delay_slot = FALSE;
    sh4_x86.priv_checked = FALSE;
    sh4_x86.fpuen_checked = FALSE;
    sh4_x86.branch_taken = FALSE;
    sh4_x86.backpatch_posn = 0;
    sh4_x86.block_start_pc = pc;
    sh4_x86.tlb_on = IS_MMU_ENABLED();
    sh4_x86.tstate = TSTATE_NONE;
    sh4_x86.double_prec = sh4r.fpscr & FPSCR_PR;
    sh4_x86.double_size = sh4r.fpscr & FPSCR_SZ;
}


uint32_t sh4_translate_end_block_size()
{
    if( sh4_x86.backpatch_posn <= 3 ) {
        return EPILOGUE_SIZE + (sh4_x86.backpatch_posn*12);
    } else {
        return EPILOGUE_SIZE + 48 + (sh4_x86.backpatch_posn-3)*15;
    }
}


/**
 * Embed a breakpoint into the generated code
 */
void sh4_translate_emit_breakpoint( sh4vma_t pc )
{
    load_imm32( R_EAX, pc );
    call_func1( sh4_translate_breakpoint_hit, R_EAX );
    sh4_x86.tstate = TSTATE_NONE;
}


#define UNTRANSLATABLE(pc) !IS_IN_ICACHE(pc)

/**
 * Embed a call to sh4_execute_instruction for situations that we
 * can't translate (just page-crossing delay slots at the moment).
 * Caller is responsible for setting new_pc before calling this function.
 *
 * Performs:
 *   Set PC = endpc
 *   Set sh4r.in_delay_slot = sh4_x86.in_delay_slot
 *   Update slice_cycle for endpc+2 (single step doesn't update slice_cycle)
 *   Call sh4_execute_instruction
 *   Call xlat_get_code_by_vma / xlat_get_code as for normal exit
 */
void exit_block_emu( sh4vma_t endpc )
{
    load_imm32( R_ECX, endpc - sh4_x86.block_start_pc );   // 5
    ADD_r32_sh4r( R_ECX, R_PC );
    
    load_imm32( R_ECX, (((endpc - sh4_x86.block_start_pc)>>1)+1)*sh4_cpu_period ); // 5
    ADD_r32_sh4r( R_ECX, REG_OFFSET(slice_cycle) );     // 6
    load_imm32( R_ECX, sh4_x86.in_delay_slot ? 1 : 0 );
    store_spreg( R_ECX, REG_OFFSET(in_delay_slot) );

    call_func0( sh4_execute_instruction );    
    load_spreg( R_EAX, R_PC );
    if( sh4_x86.tlb_on ) {
	call_func1(xlat_get_code_by_vma,R_EAX);
    } else {
	call_func1(xlat_get_code,R_EAX);
    }
    exit_block();
} 

/**
 * Translate a single instruction. Delayed branches are handled specially
 * by translating both branch and delayed instruction as a single unit (as
 * 
 * The instruction MUST be in the icache (assert check)
 *
 * @return true if the instruction marks the end of a basic block
 * (eg a branch or 
 */
uint32_t sh4_translate_instruction( sh4vma_t pc )
{
    uint32_t ir;
    /* Read instruction from icache */
    assert( IS_IN_ICACHE(pc) );
    ir = *(uint16_t *)GET_ICACHE_PTR(pc);
    
    if( !sh4_x86.in_delay_slot ) {
	sh4_translate_add_recovery( (pc - sh4_x86.block_start_pc)>>1 );
    }
%%
/* ALU operations */
ADD Rm, Rn {:
    COUNT_INST(I_ADD);
    load_reg( R_EAX, Rm );
    load_reg( R_ECX, Rn );
    ADD_r32_r32( R_EAX, R_ECX );
    store_reg( R_ECX, Rn );
    sh4_x86.tstate = TSTATE_NONE;
:}
ADD #imm, Rn {:  
    COUNT_INST(I_ADDI);
    load_reg( R_EAX, Rn );
    ADD_imm8s_r32( imm, R_EAX );
    store_reg( R_EAX, Rn );
    sh4_x86.tstate = TSTATE_NONE;
:}
ADDC Rm, Rn {:
    COUNT_INST(I_ADDC);
    if( sh4_x86.tstate != TSTATE_C ) {
        LDC_t();
    }
    load_reg( R_EAX, Rm );
    load_reg( R_ECX, Rn );
    ADC_r32_r32( R_EAX, R_ECX );
    store_reg( R_ECX, Rn );
    SETC_t();
    sh4_x86.tstate = TSTATE_C;
:}
ADDV Rm, Rn {:
    COUNT_INST(I_ADDV);
    load_reg( R_EAX, Rm );
    load_reg( R_ECX, Rn );
    ADD_r32_r32( R_EAX, R_ECX );
    store_reg( R_ECX, Rn );
    SETO_t();
    sh4_x86.tstate = TSTATE_O;
:}
AND Rm, Rn {:
    COUNT_INST(I_AND);
    load_reg( R_EAX, Rm );
    load_reg( R_ECX, Rn );
    AND_r32_r32( R_EAX, R_ECX );
    store_reg( R_ECX, Rn );
    sh4_x86.tstate = TSTATE_NONE;
:}
AND #imm, R0 {:  
    COUNT_INST(I_ANDI);
    load_reg( R_EAX, 0 );
    AND_imm32_r32(imm, R_EAX); 
    store_reg( R_EAX, 0 );
    sh4_x86.tstate = TSTATE_NONE;
:}
AND.B #imm, @(R0, GBR) {: 
    COUNT_INST(I_ANDB);
    load_reg( R_EAX, 0 );
    load_spreg( R_ECX, R_GBR );
    ADD_r32_r32( R_ECX, R_EAX );
    MMU_TRANSLATE_WRITE( R_EAX );
    MOV_r32_esp8(R_EAX, 0);
    MEM_READ_BYTE( R_EAX, R_EDX );
    MOV_esp8_r32(0, R_EAX);
    AND_imm32_r32(imm, R_EDX );
    MEM_WRITE_BYTE( R_EAX, R_EDX );
    sh4_x86.tstate = TSTATE_NONE;
:}
CMP/EQ Rm, Rn {:  
    COUNT_INST(I_CMPEQ);
    load_reg( R_EAX, Rm );
    load_reg( R_ECX, Rn );
    CMP_r32_r32( R_EAX, R_ECX );
    SETE_t();
    sh4_x86.tstate = TSTATE_E;
:}
CMP/EQ #imm, R0 {:  
    COUNT_INST(I_CMPEQI);
    load_reg( R_EAX, 0 );
    CMP_imm8s_r32(imm, R_EAX);
    SETE_t();
    sh4_x86.tstate = TSTATE_E;
:}
CMP/GE Rm, Rn {:  
    COUNT_INST(I_CMPGE);
    load_reg( R_EAX, Rm );
    load_reg( R_ECX, Rn );
    CMP_r32_r32( R_EAX, R_ECX );
    SETGE_t();
    sh4_x86.tstate = TSTATE_GE;
:}
CMP/GT Rm, Rn {: 
    COUNT_INST(I_CMPGT);
    load_reg( R_EAX, Rm );
    load_reg( R_ECX, Rn );
    CMP_r32_r32( R_EAX, R_ECX );
    SETG_t();
    sh4_x86.tstate = TSTATE_G;
:}
CMP/HI Rm, Rn {:  
    COUNT_INST(I_CMPHI);
    load_reg( R_EAX, Rm );
    load_reg( R_ECX, Rn );
    CMP_r32_r32( R_EAX, R_ECX );
    SETA_t();
    sh4_x86.tstate = TSTATE_A;
:}
CMP/HS Rm, Rn {: 
    COUNT_INST(I_CMPHS);
    load_reg( R_EAX, Rm );
    load_reg( R_ECX, Rn );
    CMP_r32_r32( R_EAX, R_ECX );
    SETAE_t();
    sh4_x86.tstate = TSTATE_AE;
 :}
CMP/PL Rn {: 
    COUNT_INST(I_CMPPL);
    load_reg( R_EAX, Rn );
    CMP_imm8s_r32( 0, R_EAX );
    SETG_t();
    sh4_x86.tstate = TSTATE_G;
:}
CMP/PZ Rn {:  
    COUNT_INST(I_CMPPZ);
    load_reg( R_EAX, Rn );
    CMP_imm8s_r32( 0, R_EAX );
    SETGE_t();
    sh4_x86.tstate = TSTATE_GE;
:}
CMP/STR Rm, Rn {:  
    COUNT_INST(I_CMPSTR);
    load_reg( R_EAX, Rm );
    load_reg( R_ECX, Rn );
    XOR_r32_r32( R_ECX, R_EAX );
    TEST_r8_r8( R_AL, R_AL );
    JE_rel8(target1);
    TEST_r8_r8( R_AH, R_AH );
    JE_rel8(target2);
    SHR_imm8_r32( 16, R_EAX );
    TEST_r8_r8( R_AL, R_AL );
    JE_rel8(target3);
    TEST_r8_r8( R_AH, R_AH );
    JMP_TARGET(target1);
    JMP_TARGET(target2);
    JMP_TARGET(target3);
    SETE_t();
    sh4_x86.tstate = TSTATE_E;
:}
DIV0S Rm, Rn {:
    COUNT_INST(I_DIV0S);
    load_reg( R_EAX, Rm );
    load_reg( R_ECX, Rn );
    SHR_imm8_r32( 31, R_EAX );
    SHR_imm8_r32( 31, R_ECX );
    store_spreg( R_EAX, R_M );
    store_spreg( R_ECX, R_Q );
    CMP_r32_r32( R_EAX, R_ECX );
    SETNE_t();
    sh4_x86.tstate = TSTATE_NE;
:}
DIV0U {:  
    COUNT_INST(I_DIV0U);
    XOR_r32_r32( R_EAX, R_EAX );
    store_spreg( R_EAX, R_Q );
    store_spreg( R_EAX, R_M );
    store_spreg( R_EAX, R_T );
    sh4_x86.tstate = TSTATE_C; // works for DIV1
:}
DIV1 Rm, Rn {:
    COUNT_INST(I_DIV1);
    load_spreg( R_ECX, R_M );
    load_reg( R_EAX, Rn );
    if( sh4_x86.tstate != TSTATE_C ) {
	LDC_t();
    }
    RCL1_r32( R_EAX );
    SETC_r8( R_DL ); // Q'
    CMP_sh4r_r32( R_Q, R_ECX );
    JE_rel8(mqequal);
    ADD_sh4r_r32( REG_OFFSET(r[Rm]), R_EAX );
    JMP_rel8(end);
    JMP_TARGET(mqequal);
    SUB_sh4r_r32( REG_OFFSET(r[Rm]), R_EAX );
    JMP_TARGET(end);
    store_reg( R_EAX, Rn ); // Done with Rn now
    SETC_r8(R_AL); // tmp1
    XOR_r8_r8( R_DL, R_AL ); // Q' = Q ^ tmp1
    XOR_r8_r8( R_AL, R_CL ); // Q'' = Q' ^ M
    store_spreg( R_ECX, R_Q );
    XOR_imm8s_r32( 1, R_AL );   // T = !Q'
    MOVZX_r8_r32( R_AL, R_EAX );
    store_spreg( R_EAX, R_T );
    sh4_x86.tstate = TSTATE_NONE;
:}
DMULS.L Rm, Rn {:  
    COUNT_INST(I_DMULS);
    load_reg( R_EAX, Rm );
    load_reg( R_ECX, Rn );
    IMUL_r32(R_ECX);
    store_spreg( R_EDX, R_MACH );
    store_spreg( R_EAX, R_MACL );
    sh4_x86.tstate = TSTATE_NONE;
:}
DMULU.L Rm, Rn {:  
    COUNT_INST(I_DMULU);
    load_reg( R_EAX, Rm );
    load_reg( R_ECX, Rn );
    MUL_r32(R_ECX);
    store_spreg( R_EDX, R_MACH );
    store_spreg( R_EAX, R_MACL );    
    sh4_x86.tstate = TSTATE_NONE;
:}
DT Rn {:  
    COUNT_INST(I_DT);
    load_reg( R_EAX, Rn );
    ADD_imm8s_r32( -1, R_EAX );
    store_reg( R_EAX, Rn );
    SETE_t();
    sh4_x86.tstate = TSTATE_E;
:}
EXTS.B Rm, Rn {:  
    COUNT_INST(I_EXTSB);
    load_reg( R_EAX, Rm );
    MOVSX_r8_r32( R_EAX, R_EAX );
    store_reg( R_EAX, Rn );
:}
EXTS.W Rm, Rn {:  
    COUNT_INST(I_EXTSW);
    load_reg( R_EAX, Rm );
    MOVSX_r16_r32( R_EAX, R_EAX );
    store_reg( R_EAX, Rn );
:}
EXTU.B Rm, Rn {:  
    COUNT_INST(I_EXTUB);
    load_reg( R_EAX, Rm );
    MOVZX_r8_r32( R_EAX, R_EAX );
    store_reg( R_EAX, Rn );
:}
EXTU.W Rm, Rn {:  
    COUNT_INST(I_EXTUW);
    load_reg( R_EAX, Rm );
    MOVZX_r16_r32( R_EAX, R_EAX );
    store_reg( R_EAX, Rn );
:}
MAC.L @Rm+, @Rn+ {:
    COUNT_INST(I_MACL);
    if( Rm == Rn ) {
	load_reg( R_EAX, Rm );
	check_ralign32( R_EAX );
	MMU_TRANSLATE_READ( R_EAX );
	MOV_r32_esp8(R_EAX, 0);
	load_reg( R_EAX, Rn );
	ADD_imm8s_r32( 4, R_EAX );
	MMU_TRANSLATE_READ( R_EAX );
	ADD_imm8s_sh4r( 8, REG_OFFSET(r[Rn]) );
	// Note translate twice in case of page boundaries. Maybe worth
	// adding a page-boundary check to skip the second translation
    } else {
	load_reg( R_EAX, Rm );
	check_ralign32( R_EAX );
	MMU_TRANSLATE_READ( R_EAX );
	MOV_r32_esp8( R_EAX, 0 );
	load_reg( R_EAX, Rn );
	check_ralign32( R_EAX );
	MMU_TRANSLATE_READ( R_EAX );
	ADD_imm8s_sh4r( 4, REG_OFFSET(r[Rn]) );
	ADD_imm8s_sh4r( 4, REG_OFFSET(r[Rm]) );
    }
    MEM_READ_LONG( R_EAX, R_EAX );
    MOV_r32_esp8( R_EAX, 4 );
    MOV_esp8_r32( 0, R_EAX );
    MEM_READ_LONG( R_EAX, R_EAX );
    MOV_esp8_r32( 4, R_ECX );

    IMUL_r32( R_ECX );
    ADD_r32_sh4r( R_EAX, R_MACL );
    ADC_r32_sh4r( R_EDX, R_MACH );

    load_spreg( R_ECX, R_S );
    TEST_r32_r32(R_ECX, R_ECX);
    JE_rel8( nosat );
    call_func0( signsat48 );
    JMP_TARGET( nosat );
    sh4_x86.tstate = TSTATE_NONE;
:}
MAC.W @Rm+, @Rn+ {:  
    COUNT_INST(I_MACW);
    if( Rm == Rn ) {
	load_reg( R_EAX, Rm );
	check_ralign16( R_EAX );
	MMU_TRANSLATE_READ( R_EAX );
        MOV_r32_esp8( R_EAX, 0 );
	load_reg( R_EAX, Rn );
	ADD_imm8s_r32( 2, R_EAX );
	MMU_TRANSLATE_READ( R_EAX );
	ADD_imm8s_sh4r( 4, REG_OFFSET(r[Rn]) );
	// Note translate twice in case of page boundaries. Maybe worth
	// adding a page-boundary check to skip the second translation
    } else {
	load_reg( R_EAX, Rm );
	check_ralign16( R_EAX );
	MMU_TRANSLATE_READ( R_EAX );
        MOV_r32_esp8( R_EAX, 0 );
	load_reg( R_EAX, Rn );
	check_ralign16( R_EAX );
	MMU_TRANSLATE_READ( R_EAX );
	ADD_imm8s_sh4r( 2, REG_OFFSET(r[Rn]) );
	ADD_imm8s_sh4r( 2, REG_OFFSET(r[Rm]) );
    }
    MEM_READ_WORD( R_EAX, R_EAX );
    MOV_r32_esp8( R_EAX, 4 );
    MOV_esp8_r32( 0, R_EAX );
    MEM_READ_WORD( R_EAX, R_EAX );
    MOV_esp8_r32( 4, R_ECX );

    IMUL_r32( R_ECX );
    load_spreg( R_ECX, R_S );
    TEST_r32_r32( R_ECX, R_ECX );
    JE_rel8( nosat );

    ADD_r32_sh4r( R_EAX, R_MACL );  // 6
    JNO_rel8( end );            // 2
    load_imm32( R_EDX, 1 );         // 5
    store_spreg( R_EDX, R_MACH );   // 6
    JS_rel8( positive );        // 2
    load_imm32( R_EAX, 0x80000000 );// 5
    store_spreg( R_EAX, R_MACL );   // 6
    JMP_rel8(end2);           // 2

    JMP_TARGET(positive);
    load_imm32( R_EAX, 0x7FFFFFFF );// 5
    store_spreg( R_EAX, R_MACL );   // 6
    JMP_rel8(end3);            // 2

    JMP_TARGET(nosat);
    ADD_r32_sh4r( R_EAX, R_MACL );  // 6
    ADC_r32_sh4r( R_EDX, R_MACH );  // 6
    JMP_TARGET(end);
    JMP_TARGET(end2);
    JMP_TARGET(end3);
    sh4_x86.tstate = TSTATE_NONE;
:}
MOVT Rn {:  
    COUNT_INST(I_MOVT);
    load_spreg( R_EAX, R_T );
    store_reg( R_EAX, Rn );
:}
MUL.L Rm, Rn {:  
    COUNT_INST(I_MULL);
    load_reg( R_EAX, Rm );
    load_reg( R_ECX, Rn );
    MUL_r32( R_ECX );
    store_spreg( R_EAX, R_MACL );
    sh4_x86.tstate = TSTATE_NONE;
:}
MULS.W Rm, Rn {:
    COUNT_INST(I_MULSW);
    load_reg16s( R_EAX, Rm );
    load_reg16s( R_ECX, Rn );
    MUL_r32( R_ECX );
    store_spreg( R_EAX, R_MACL );
    sh4_x86.tstate = TSTATE_NONE;
:}
MULU.W Rm, Rn {:  
    COUNT_INST(I_MULUW);
    load_reg16u( R_EAX, Rm );
    load_reg16u( R_ECX, Rn );
    MUL_r32( R_ECX );
    store_spreg( R_EAX, R_MACL );
    sh4_x86.tstate = TSTATE_NONE;
:}
NEG Rm, Rn {:
    COUNT_INST(I_NEG);
    load_reg( R_EAX, Rm );
    NEG_r32( R_EAX );
    store_reg( R_EAX, Rn );
    sh4_x86.tstate = TSTATE_NONE;
:}
NEGC Rm, Rn {:  
    COUNT_INST(I_NEGC);
    load_reg( R_EAX, Rm );
    XOR_r32_r32( R_ECX, R_ECX );
    LDC_t();
    SBB_r32_r32( R_EAX, R_ECX );
    store_reg( R_ECX, Rn );
    SETC_t();
    sh4_x86.tstate = TSTATE_C;
:}
NOT Rm, Rn {:  
    COUNT_INST(I_NOT);
    load_reg( R_EAX, Rm );
    NOT_r32( R_EAX );
    store_reg( R_EAX, Rn );
    sh4_x86.tstate = TSTATE_NONE;
:}
OR Rm, Rn {:  
    COUNT_INST(I_OR);
    load_reg( R_EAX, Rm );
    load_reg( R_ECX, Rn );
    OR_r32_r32( R_EAX, R_ECX );
    store_reg( R_ECX, Rn );
    sh4_x86.tstate = TSTATE_NONE;
:}
OR #imm, R0 {:
    COUNT_INST(I_ORI);
    load_reg( R_EAX, 0 );
    OR_imm32_r32(imm, R_EAX);
    store_reg( R_EAX, 0 );
    sh4_x86.tstate = TSTATE_NONE;
:}
OR.B #imm, @(R0, GBR) {:  
    COUNT_INST(I_ORB);
    load_reg( R_EAX, 0 );
    load_spreg( R_ECX, R_GBR );
    ADD_r32_r32( R_ECX, R_EAX );
    MMU_TRANSLATE_WRITE( R_EAX );
    MOV_r32_esp8( R_EAX, 0 );
    MEM_READ_BYTE( R_EAX, R_EDX );
    MOV_esp8_r32( 0, R_EAX );
    OR_imm32_r32(imm, R_EDX );
    MEM_WRITE_BYTE( R_EAX, R_EDX );
    sh4_x86.tstate = TSTATE_NONE;
:}
ROTCL Rn {:
    COUNT_INST(I_ROTCL);
    load_reg( R_EAX, Rn );
    if( sh4_x86.tstate != TSTATE_C ) {
	LDC_t();
    }
    RCL1_r32( R_EAX );
    store_reg( R_EAX, Rn );
    SETC_t();
    sh4_x86.tstate = TSTATE_C;
:}
ROTCR Rn {:  
    COUNT_INST(I_ROTCR);
    load_reg( R_EAX, Rn );
    if( sh4_x86.tstate != TSTATE_C ) {
	LDC_t();
    }
    RCR1_r32( R_EAX );
    store_reg( R_EAX, Rn );
    SETC_t();
    sh4_x86.tstate = TSTATE_C;
:}
ROTL Rn {:  
    COUNT_INST(I_ROTL);
    load_reg( R_EAX, Rn );
    ROL1_r32( R_EAX );
    store_reg( R_EAX, Rn );
    SETC_t();
    sh4_x86.tstate = TSTATE_C;
:}
ROTR Rn {:  
    COUNT_INST(I_ROTR);
    load_reg( R_EAX, Rn );
    ROR1_r32( R_EAX );
    store_reg( R_EAX, Rn );
    SETC_t();
    sh4_x86.tstate = TSTATE_C;
:}
SHAD Rm, Rn {:
    COUNT_INST(I_SHAD);
    /* Annoyingly enough, not directly convertible */
    load_reg( R_EAX, Rn );
    load_reg( R_ECX, Rm );
    CMP_imm32_r32( 0, R_ECX );
    JGE_rel8(doshl);
                    
    NEG_r32( R_ECX );      // 2
    AND_imm8_r8( 0x1F, R_CL ); // 3
    JE_rel8(emptysar);     // 2
    SAR_r32_CL( R_EAX );       // 2
    JMP_rel8(end);          // 2

    JMP_TARGET(emptysar);
    SAR_imm8_r32(31, R_EAX );  // 3
    JMP_rel8(end2);

    JMP_TARGET(doshl);
    AND_imm8_r8( 0x1F, R_CL ); // 3
    SHL_r32_CL( R_EAX );       // 2
    JMP_TARGET(end);
    JMP_TARGET(end2);
    store_reg( R_EAX, Rn );
    sh4_x86.tstate = TSTATE_NONE;
:}
SHLD Rm, Rn {:  
    COUNT_INST(I_SHLD);
    load_reg( R_EAX, Rn );
    load_reg( R_ECX, Rm );
    CMP_imm32_r32( 0, R_ECX );
    JGE_rel8(doshl);

    NEG_r32( R_ECX );      // 2
    AND_imm8_r8( 0x1F, R_CL ); // 3
    JE_rel8(emptyshr );
    SHR_r32_CL( R_EAX );       // 2
    JMP_rel8(end);          // 2

    JMP_TARGET(emptyshr);
    XOR_r32_r32( R_EAX, R_EAX );
    JMP_rel8(end2);

    JMP_TARGET(doshl);
    AND_imm8_r8( 0x1F, R_CL ); // 3
    SHL_r32_CL( R_EAX );       // 2
    JMP_TARGET(end);
    JMP_TARGET(end2);
    store_reg( R_EAX, Rn );
    sh4_x86.tstate = TSTATE_NONE;
:}
SHAL Rn {: 
    COUNT_INST(I_SHAL);
    load_reg( R_EAX, Rn );
    SHL1_r32( R_EAX );
    SETC_t();
    store_reg( R_EAX, Rn );
    sh4_x86.tstate = TSTATE_C;
:}
SHAR Rn {:  
    COUNT_INST(I_SHAR);
    load_reg( R_EAX, Rn );
    SAR1_r32( R_EAX );
    SETC_t();
    store_reg( R_EAX, Rn );
    sh4_x86.tstate = TSTATE_C;
:}
SHLL Rn {:  
    COUNT_INST(I_SHLL);
    load_reg( R_EAX, Rn );
    SHL1_r32( R_EAX );
    SETC_t();
    store_reg( R_EAX, Rn );
    sh4_x86.tstate = TSTATE_C;
:}
SHLL2 Rn {:
    COUNT_INST(I_SHLL);
    load_reg( R_EAX, Rn );
    SHL_imm8_r32( 2, R_EAX );
    store_reg( R_EAX, Rn );
    sh4_x86.tstate = TSTATE_NONE;
:}
SHLL8 Rn {:  
    COUNT_INST(I_SHLL);
    load_reg( R_EAX, Rn );
    SHL_imm8_r32( 8, R_EAX );
    store_reg( R_EAX, Rn );
    sh4_x86.tstate = TSTATE_NONE;
:}
SHLL16 Rn {:  
    COUNT_INST(I_SHLL);
    load_reg( R_EAX, Rn );
    SHL_imm8_r32( 16, R_EAX );
    store_reg( R_EAX, Rn );
    sh4_x86.tstate = TSTATE_NONE;
:}
SHLR Rn {:  
    COUNT_INST(I_SHLR);
    load_reg( R_EAX, Rn );
    SHR1_r32( R_EAX );
    SETC_t();
    store_reg( R_EAX, Rn );
    sh4_x86.tstate = TSTATE_C;
:}
SHLR2 Rn {:  
    COUNT_INST(I_SHLR);
    load_reg( R_EAX, Rn );
    SHR_imm8_r32( 2, R_EAX );
    store_reg( R_EAX, Rn );
    sh4_x86.tstate = TSTATE_NONE;
:}
SHLR8 Rn {:  
    COUNT_INST(I_SHLR);
    load_reg( R_EAX, Rn );
    SHR_imm8_r32( 8, R_EAX );
    store_reg( R_EAX, Rn );
    sh4_x86.tstate = TSTATE_NONE;
:}
SHLR16 Rn {:  
    COUNT_INST(I_SHLR);
    load_reg( R_EAX, Rn );
    SHR_imm8_r32( 16, R_EAX );
    store_reg( R_EAX, Rn );
    sh4_x86.tstate = TSTATE_NONE;
:}
SUB Rm, Rn {:  
    COUNT_INST(I_SUB);
    load_reg( R_EAX, Rm );
    load_reg( R_ECX, Rn );
    SUB_r32_r32( R_EAX, R_ECX );
    store_reg( R_ECX, Rn );
    sh4_x86.tstate = TSTATE_NONE;
:}
SUBC Rm, Rn {:  
    COUNT_INST(I_SUBC);
    load_reg( R_EAX, Rm );
    load_reg( R_ECX, Rn );
    if( sh4_x86.tstate != TSTATE_C ) {
	LDC_t();
    }
    SBB_r32_r32( R_EAX, R_ECX );
    store_reg( R_ECX, Rn );
    SETC_t();
    sh4_x86.tstate = TSTATE_C;
:}
SUBV Rm, Rn {:  
    COUNT_INST(I_SUBV);
    load_reg( R_EAX, Rm );
    load_reg( R_ECX, Rn );
    SUB_r32_r32( R_EAX, R_ECX );
    store_reg( R_ECX, Rn );
    SETO_t();
    sh4_x86.tstate = TSTATE_O;
:}
SWAP.B Rm, Rn {:  
    COUNT_INST(I_SWAPB);
    load_reg( R_EAX, Rm );
    XCHG_r8_r8( R_AL, R_AH ); // NB: does not touch EFLAGS
    store_reg( R_EAX, Rn );
:}
SWAP.W Rm, Rn {:  
    COUNT_INST(I_SWAPB);
    load_reg( R_EAX, Rm );
    MOV_r32_r32( R_EAX, R_ECX );
    SHL_imm8_r32( 16, R_ECX );
    SHR_imm8_r32( 16, R_EAX );
    OR_r32_r32( R_EAX, R_ECX );
    store_reg( R_ECX, Rn );
    sh4_x86.tstate = TSTATE_NONE;
:}
TAS.B @Rn {:  
    COUNT_INST(I_TASB);
    load_reg( R_EAX, Rn );
    MMU_TRANSLATE_WRITE( R_EAX );
    MOV_r32_esp8( R_EAX, 0 );
    MEM_READ_BYTE( R_EAX, R_EDX );
    TEST_r8_r8( R_DL, R_DL );
    SETE_t();
    OR_imm8_r8( 0x80, R_DL );
    MOV_esp8_r32( 0, R_EAX );
    MEM_WRITE_BYTE( R_EAX, R_EDX );
    sh4_x86.tstate = TSTATE_NONE;
:}
TST Rm, Rn {:  
    COUNT_INST(I_TST);
    load_reg( R_EAX, Rm );
    load_reg( R_ECX, Rn );
    TEST_r32_r32( R_EAX, R_ECX );
    SETE_t();
    sh4_x86.tstate = TSTATE_E;
:}
TST #imm, R0 {:  
    COUNT_INST(I_TSTI);
    load_reg( R_EAX, 0 );
    TEST_imm32_r32( imm, R_EAX );
    SETE_t();
    sh4_x86.tstate = TSTATE_E;
:}
TST.B #imm, @(R0, GBR) {:  
    COUNT_INST(I_TSTB);
    load_reg( R_EAX, 0);
    load_reg( R_ECX, R_GBR);
    ADD_r32_r32( R_ECX, R_EAX );
    MMU_TRANSLATE_READ( R_EAX );
    MEM_READ_BYTE( R_EAX, R_EAX );
    TEST_imm8_r8( imm, R_AL );
    SETE_t();
    sh4_x86.tstate = TSTATE_E;
:}
XOR Rm, Rn {:  
    COUNT_INST(I_XOR);
    load_reg( R_EAX, Rm );
    load_reg( R_ECX, Rn );
    XOR_r32_r32( R_EAX, R_ECX );
    store_reg( R_ECX, Rn );
    sh4_x86.tstate = TSTATE_NONE;
:}
XOR #imm, R0 {:  
    COUNT_INST(I_XORI);
    load_reg( R_EAX, 0 );
    XOR_imm32_r32( imm, R_EAX );
    store_reg( R_EAX, 0 );
    sh4_x86.tstate = TSTATE_NONE;
:}
XOR.B #imm, @(R0, GBR) {:  
    COUNT_INST(I_XORB);
    load_reg( R_EAX, 0 );
    load_spreg( R_ECX, R_GBR );
    ADD_r32_r32( R_ECX, R_EAX );
    MMU_TRANSLATE_WRITE( R_EAX );
    MOV_r32_esp8( R_EAX, 0 );
    MEM_READ_BYTE(R_EAX, R_EDX);
    MOV_esp8_r32( 0, R_EAX );
    XOR_imm32_r32( imm, R_EDX );
    MEM_WRITE_BYTE( R_EAX, R_EDX );
    sh4_x86.tstate = TSTATE_NONE;
:}
XTRCT Rm, Rn {:
    COUNT_INST(I_XTRCT);
    load_reg( R_EAX, Rm );
    load_reg( R_ECX, Rn );
    SHL_imm8_r32( 16, R_EAX );
    SHR_imm8_r32( 16, R_ECX );
    OR_r32_r32( R_EAX, R_ECX );
    store_reg( R_ECX, Rn );
    sh4_x86.tstate = TSTATE_NONE;
:}

/* Data move instructions */
MOV Rm, Rn {:  
    COUNT_INST(I_MOV);
    load_reg( R_EAX, Rm );
    store_reg( R_EAX, Rn );
:}
MOV #imm, Rn {:  
    COUNT_INST(I_MOVI);
    load_imm32( R_EAX, imm );
    store_reg( R_EAX, Rn );
:}
MOV.B Rm, @Rn {:  
    COUNT_INST(I_MOVB);
    load_reg( R_EAX, Rn );
    MMU_TRANSLATE_WRITE( R_EAX );
    load_reg( R_EDX, Rm );
    MEM_WRITE_BYTE( R_EAX, R_EDX );
    sh4_x86.tstate = TSTATE_NONE;
:}
MOV.B Rm, @-Rn {:  
    COUNT_INST(I_MOVB);
    load_reg( R_EAX, Rn );
    ADD_imm8s_r32( -1, R_EAX );
    MMU_TRANSLATE_WRITE( R_EAX );
    load_reg( R_EDX, Rm );
    ADD_imm8s_sh4r( -1, REG_OFFSET(r[Rn]) );
    MEM_WRITE_BYTE( R_EAX, R_EDX );
    sh4_x86.tstate = TSTATE_NONE;
:}
MOV.B Rm, @(R0, Rn) {:  
    COUNT_INST(I_MOVB);
    load_reg( R_EAX, 0 );
    load_reg( R_ECX, Rn );
    ADD_r32_r32( R_ECX, R_EAX );
    MMU_TRANSLATE_WRITE( R_EAX );
    load_reg( R_EDX, Rm );
    MEM_WRITE_BYTE( R_EAX, R_EDX );
    sh4_x86.tstate = TSTATE_NONE;
:}
MOV.B R0, @(disp, GBR) {:  
    COUNT_INST(I_MOVB);
    load_spreg( R_EAX, R_GBR );
    ADD_imm32_r32( disp, R_EAX );
    MMU_TRANSLATE_WRITE( R_EAX );
    load_reg( R_EDX, 0 );
    MEM_WRITE_BYTE( R_EAX, R_EDX );
    sh4_x86.tstate = TSTATE_NONE;
:}
MOV.B R0, @(disp, Rn) {:  
    COUNT_INST(I_MOVB);
    load_reg( R_EAX, Rn );
    ADD_imm32_r32( disp, R_EAX );
    MMU_TRANSLATE_WRITE( R_EAX );
    load_reg( R_EDX, 0 );
    MEM_WRITE_BYTE( R_EAX, R_EDX );
    sh4_x86.tstate = TSTATE_NONE;
:}
MOV.B @Rm, Rn {:  
    COUNT_INST(I_MOVB);
    load_reg( R_EAX, Rm );
    MMU_TRANSLATE_READ( R_EAX );
    MEM_READ_BYTE( R_EAX, R_EAX );
    store_reg( R_EAX, Rn );
    sh4_x86.tstate = TSTATE_NONE;
:}
MOV.B @Rm+, Rn {:  
    COUNT_INST(I_MOVB);
    load_reg( R_EAX, Rm );
    MMU_TRANSLATE_READ( R_EAX );
    ADD_imm8s_sh4r( 1, REG_OFFSET(r[Rm]) );
    MEM_READ_BYTE( R_EAX, R_EAX );
    store_reg( R_EAX, Rn );
    sh4_x86.tstate = TSTATE_NONE;
:}
MOV.B @(R0, Rm), Rn {:  
    COUNT_INST(I_MOVB);
    load_reg( R_EAX, 0 );
    load_reg( R_ECX, Rm );
    ADD_r32_r32( R_ECX, R_EAX );
    MMU_TRANSLATE_READ( R_EAX )
    MEM_READ_BYTE( R_EAX, R_EAX );
    store_reg( R_EAX, Rn );
    sh4_x86.tstate = TSTATE_NONE;
:}
MOV.B @(disp, GBR), R0 {:  
    COUNT_INST(I_MOVB);
    load_spreg( R_EAX, R_GBR );
    ADD_imm32_r32( disp, R_EAX );
    MMU_TRANSLATE_READ( R_EAX );
    MEM_READ_BYTE( R_EAX, R_EAX );
    store_reg( R_EAX, 0 );
    sh4_x86.tstate = TSTATE_NONE;
:}
MOV.B @(disp, Rm), R0 {:  
    COUNT_INST(I_MOVB);
    load_reg( R_EAX, Rm );
    ADD_imm32_r32( disp, R_EAX );
    MMU_TRANSLATE_READ( R_EAX );
    MEM_READ_BYTE( R_EAX, R_EAX );
    store_reg( R_EAX, 0 );
    sh4_x86.tstate = TSTATE_NONE;
:}
MOV.L Rm, @Rn {:
    COUNT_INST(I_MOVL);
    load_reg( R_EAX, Rn );
    check_walign32(R_EAX);
    MMU_TRANSLATE_WRITE( R_EAX );
    load_reg( R_EDX, Rm );
    MEM_WRITE_LONG( R_EAX, R_EDX );
    sh4_x86.tstate = TSTATE_NONE;
:}
MOV.L Rm, @-Rn {:  
    COUNT_INST(I_MOVL);
    load_reg( R_EAX, Rn );
    ADD_imm8s_r32( -4, R_EAX );
    check_walign32( R_EAX );
    MMU_TRANSLATE_WRITE( R_EAX );
    load_reg( R_EDX, Rm );
    ADD_imm8s_sh4r( -4, REG_OFFSET(r[Rn]) );
    MEM_WRITE_LONG( R_EAX, R_EDX );
    sh4_x86.tstate = TSTATE_NONE;
:}
MOV.L Rm, @(R0, Rn) {:  
    COUNT_INST(I_MOVL);
    load_reg( R_EAX, 0 );
    load_reg( R_ECX, Rn );
    ADD_r32_r32( R_ECX, R_EAX );
    check_walign32( R_EAX );
    MMU_TRANSLATE_WRITE( R_EAX );
    load_reg( R_EDX, Rm );
    MEM_WRITE_LONG( R_EAX, R_EDX );
    sh4_x86.tstate = TSTATE_NONE;
:}
MOV.L R0, @(disp, GBR) {:  
    COUNT_INST(I_MOVL);
    load_spreg( R_EAX, R_GBR );
    ADD_imm32_r32( disp, R_EAX );
    check_walign32( R_EAX );
    MMU_TRANSLATE_WRITE( R_EAX );
    load_reg( R_EDX, 0 );
    MEM_WRITE_LONG( R_EAX, R_EDX );
    sh4_x86.tstate = TSTATE_NONE;
:}
MOV.L Rm, @(disp, Rn) {:  
    COUNT_INST(I_MOVL);
    load_reg( R_EAX, Rn );
    ADD_imm32_r32( disp, R_EAX );
    check_walign32( R_EAX );
    MMU_TRANSLATE_WRITE( R_EAX );
    load_reg( R_EDX, Rm );
    MEM_WRITE_LONG( R_EAX, R_EDX );
    sh4_x86.tstate = TSTATE_NONE;
:}
MOV.L @Rm, Rn {:  
    COUNT_INST(I_MOVL);
    load_reg( R_EAX, Rm );
    check_ralign32( R_EAX );
    MMU_TRANSLATE_READ( R_EAX );
    MEM_READ_LONG( R_EAX, R_EAX );
    store_reg( R_EAX, Rn );
    sh4_x86.tstate = TSTATE_NONE;
:}
MOV.L @Rm+, Rn {:  
    COUNT_INST(I_MOVL);
    load_reg( R_EAX, Rm );
    check_ralign32( R_EAX );
    MMU_TRANSLATE_READ( R_EAX );
    ADD_imm8s_sh4r( 4, REG_OFFSET(r[Rm]) );
    MEM_READ_LONG( R_EAX, R_EAX );
    store_reg( R_EAX, Rn );
    sh4_x86.tstate = TSTATE_NONE;
:}
MOV.L @(R0, Rm), Rn {:  
    COUNT_INST(I_MOVL);
    load_reg( R_EAX, 0 );
    load_reg( R_ECX, Rm );
    ADD_r32_r32( R_ECX, R_EAX );
    check_ralign32( R_EAX );
    MMU_TRANSLATE_READ( R_EAX );
    MEM_READ_LONG( R_EAX, R_EAX );
    store_reg( R_EAX, Rn );
    sh4_x86.tstate = TSTATE_NONE;
:}
MOV.L @(disp, GBR), R0 {:
    COUNT_INST(I_MOVL);
    load_spreg( R_EAX, R_GBR );
    ADD_imm32_r32( disp, R_EAX );
    check_ralign32( R_EAX );
    MMU_TRANSLATE_READ( R_EAX );
    MEM_READ_LONG( R_EAX, R_EAX );
    store_reg( R_EAX, 0 );
    sh4_x86.tstate = TSTATE_NONE;
:}
MOV.L @(disp, PC), Rn {:  
    COUNT_INST(I_MOVLPC);
    if( sh4_x86.in_delay_slot ) {
	SLOTILLEGAL();
    } else {
	uint32_t target = (pc & 0xFFFFFFFC) + disp + 4;
	if( IS_IN_ICACHE(target) ) {
	    // If the target address is in the same page as the code, it's
	    // pretty safe to just ref it directly and circumvent the whole
	    // memory subsystem. (this is a big performance win)

	    // FIXME: There's a corner-case that's not handled here when
	    // the current code-page is in the ITLB but not in the UTLB.
	    // (should generate a TLB miss although need to test SH4 
	    // behaviour to confirm) Unlikely to be anyone depending on this
	    // behaviour though.
	    sh4ptr_t ptr = GET_ICACHE_PTR(target);
	    MOV_moff32_EAX( ptr );
	} else {
	    // Note: we use sh4r.pc for the calc as we could be running at a
	    // different virtual address than the translation was done with,
	    // but we can safely assume that the low bits are the same.
	    load_imm32( R_EAX, (pc-sh4_x86.block_start_pc) + disp + 4 - (pc&0x03) );
	    ADD_sh4r_r32( R_PC, R_EAX );
	    MMU_TRANSLATE_READ( R_EAX );
	    MEM_READ_LONG( R_EAX, R_EAX );
	    sh4_x86.tstate = TSTATE_NONE;
	}
	store_reg( R_EAX, Rn );
    }
:}
MOV.L @(disp, Rm), Rn {:  
    COUNT_INST(I_MOVL);
    load_reg( R_EAX, Rm );
    ADD_imm8s_r32( disp, R_EAX );
    check_ralign32( R_EAX );
    MMU_TRANSLATE_READ( R_EAX );
    MEM_READ_LONG( R_EAX, R_EAX );
    store_reg( R_EAX, Rn );
    sh4_x86.tstate = TSTATE_NONE;
:}
MOV.W Rm, @Rn {:  
    COUNT_INST(I_MOVW);
    load_reg( R_EAX, Rn );
    check_walign16( R_EAX );
    MMU_TRANSLATE_WRITE( R_EAX )
    load_reg( R_EDX, Rm );
    MEM_WRITE_WORD( R_EAX, R_EDX );
    sh4_x86.tstate = TSTATE_NONE;
:}
MOV.W Rm, @-Rn {:  
    COUNT_INST(I_MOVW);
    load_reg( R_EAX, Rn );
    ADD_imm8s_r32( -2, R_EAX );
    check_walign16( R_EAX );
    MMU_TRANSLATE_WRITE( R_EAX );
    load_reg( R_EDX, Rm );
    ADD_imm8s_sh4r( -2, REG_OFFSET(r[Rn]) );
    MEM_WRITE_WORD( R_EAX, R_EDX );
    sh4_x86.tstate = TSTATE_NONE;
:}
MOV.W Rm, @(R0, Rn) {:  
    COUNT_INST(I_MOVW);
    load_reg( R_EAX, 0 );
    load_reg( R_ECX, Rn );
    ADD_r32_r32( R_ECX, R_EAX );
    check_walign16( R_EAX );
    MMU_TRANSLATE_WRITE( R_EAX );
    load_reg( R_EDX, Rm );
    MEM_WRITE_WORD( R_EAX, R_EDX );
    sh4_x86.tstate = TSTATE_NONE;
:}
MOV.W R0, @(disp, GBR) {:  
    COUNT_INST(I_MOVW);
    load_spreg( R_EAX, R_GBR );
    ADD_imm32_r32( disp, R_EAX );
    check_walign16( R_EAX );
    MMU_TRANSLATE_WRITE( R_EAX );
    load_reg( R_EDX, 0 );
    MEM_WRITE_WORD( R_EAX, R_EDX );
    sh4_x86.tstate = TSTATE_NONE;
:}
MOV.W R0, @(disp, Rn) {:  
    COUNT_INST(I_MOVW);
    load_reg( R_EAX, Rn );
    ADD_imm32_r32( disp, R_EAX );
    check_walign16( R_EAX );
    MMU_TRANSLATE_WRITE( R_EAX );
    load_reg( R_EDX, 0 );
    MEM_WRITE_WORD( R_EAX, R_EDX );
    sh4_x86.tstate = TSTATE_NONE;
:}
MOV.W @Rm, Rn {:  
    COUNT_INST(I_MOVW);
    load_reg( R_EAX, Rm );
    check_ralign16( R_EAX );
    MMU_TRANSLATE_READ( R_EAX );
    MEM_READ_WORD( R_EAX, R_EAX );
    store_reg( R_EAX, Rn );
    sh4_x86.tstate = TSTATE_NONE;
:}
MOV.W @Rm+, Rn {:  
    COUNT_INST(I_MOVW);
    load_reg( R_EAX, Rm );
    check_ralign16( R_EAX );
    MMU_TRANSLATE_READ( R_EAX );
    ADD_imm8s_sh4r( 2, REG_OFFSET(r[Rm]) );
    MEM_READ_WORD( R_EAX, R_EAX );
    store_reg( R_EAX, Rn );
    sh4_x86.tstate = TSTATE_NONE;
:}
MOV.W @(R0, Rm), Rn {:  
    COUNT_INST(I_MOVW);
    load_reg( R_EAX, 0 );
    load_reg( R_ECX, Rm );
    ADD_r32_r32( R_ECX, R_EAX );
    check_ralign16( R_EAX );
    MMU_TRANSLATE_READ( R_EAX );
    MEM_READ_WORD( R_EAX, R_EAX );
    store_reg( R_EAX, Rn );
    sh4_x86.tstate = TSTATE_NONE;
:}
MOV.W @(disp, GBR), R0 {:  
    COUNT_INST(I_MOVW);
    load_spreg( R_EAX, R_GBR );
    ADD_imm32_r32( disp, R_EAX );
    check_ralign16( R_EAX );
    MMU_TRANSLATE_READ( R_EAX );
    MEM_READ_WORD( R_EAX, R_EAX );
    store_reg( R_EAX, 0 );
    sh4_x86.tstate = TSTATE_NONE;
:}
MOV.W @(disp, PC), Rn {:  
    COUNT_INST(I_MOVW);
    if( sh4_x86.in_delay_slot ) {
	SLOTILLEGAL();
    } else {
	// See comments for MOV.L @(disp, PC), Rn
	uint32_t target = pc + disp + 4;
	if( IS_IN_ICACHE(target) ) {
	    sh4ptr_t ptr = GET_ICACHE_PTR(target);
	    MOV_moff32_EAX( ptr );
	    MOVSX_r16_r32( R_EAX, R_EAX );
	} else {
	    load_imm32( R_EAX, (pc - sh4_x86.block_start_pc) + disp + 4 );
	    ADD_sh4r_r32( R_PC, R_EAX );
	    MMU_TRANSLATE_READ( R_EAX );
	    MEM_READ_WORD( R_EAX, R_EAX );
	    sh4_x86.tstate = TSTATE_NONE;
	}
	store_reg( R_EAX, Rn );
    }
:}
MOV.W @(disp, Rm), R0 {:  
    COUNT_INST(I_MOVW);
    load_reg( R_EAX, Rm );
    ADD_imm32_r32( disp, R_EAX );
    check_ralign16( R_EAX );
    MMU_TRANSLATE_READ( R_EAX );
    MEM_READ_WORD( R_EAX, R_EAX );
    store_reg( R_EAX, 0 );
    sh4_x86.tstate = TSTATE_NONE;
:}
MOVA @(disp, PC), R0 {:  
    COUNT_INST(I_MOVA);
    if( sh4_x86.in_delay_slot ) {
	SLOTILLEGAL();
    } else {
	load_imm32( R_ECX, (pc - sh4_x86.block_start_pc) + disp + 4 - (pc&0x03) );
	ADD_sh4r_r32( R_PC, R_ECX );
	store_reg( R_ECX, 0 );
	sh4_x86.tstate = TSTATE_NONE;
    }
:}
MOVCA.L R0, @Rn {:  
    COUNT_INST(I_MOVCA);
    load_reg( R_EAX, Rn );
    check_walign32( R_EAX );
    MMU_TRANSLATE_WRITE( R_EAX );
    load_reg( R_EDX, 0 );
    MEM_WRITE_LONG( R_EAX, R_EDX );
    sh4_x86.tstate = TSTATE_NONE;
:}

/* Control transfer instructions */
BF disp {:
    COUNT_INST(I_BF);
    if( sh4_x86.in_delay_slot ) {
	SLOTILLEGAL();
    } else {
	sh4vma_t target = disp + pc + 4;
	JT_rel8( nottaken );
	exit_block_rel(target, pc+2 );
	JMP_TARGET(nottaken);
	return 2;
    }
:}
BF/S disp {:
    COUNT_INST(I_BFS);
    if( sh4_x86.in_delay_slot ) {
	SLOTILLEGAL();
    } else {
	sh4_x86.in_delay_slot = DELAY_PC;
	if( UNTRANSLATABLE(pc+2) ) {
	    load_imm32( R_EAX, pc + 4 - sh4_x86.block_start_pc );
	    JT_rel8(nottaken);
	    ADD_imm32_r32( disp, R_EAX );
	    JMP_TARGET(nottaken);
	    ADD_sh4r_r32( R_PC, R_EAX );
	    store_spreg( R_EAX, R_NEW_PC );
	    exit_block_emu(pc+2);
	    sh4_x86.branch_taken = TRUE;
	    return 2;
	} else {
	    if( sh4_x86.tstate == TSTATE_NONE ) {
		CMP_imm8s_sh4r( 1, R_T );
		sh4_x86.tstate = TSTATE_E;
	    }
	    sh4vma_t target = disp + pc + 4;
	    OP(0x0F); OP(0x80+sh4_x86.tstate); uint32_t *patch = (uint32_t *)xlat_output; OP32(0); // JT rel32
	    int save_tstate = sh4_x86.tstate;
	    sh4_translate_instruction(pc+2);
	    exit_block_rel( target, pc+4 );
	    
	    // not taken
	    *patch = (xlat_output - ((uint8_t *)patch)) - 4;
	    sh4_x86.tstate = save_tstate;
	    sh4_translate_instruction(pc+2);
	    return 4;
	}
    }
:}
BRA disp {:  
    COUNT_INST(I_BRA);
    if( sh4_x86.in_delay_slot ) {
	SLOTILLEGAL();
    } else {
	sh4_x86.in_delay_slot = DELAY_PC;
	sh4_x86.branch_taken = TRUE;
	if( UNTRANSLATABLE(pc+2) ) {
	    load_spreg( R_EAX, R_PC );
	    ADD_imm32_r32( pc + disp + 4 - sh4_x86.block_start_pc, R_EAX );
	    store_spreg( R_EAX, R_NEW_PC );
	    exit_block_emu(pc+2);
	    return 2;
	} else {
	    sh4_translate_instruction( pc + 2 );
	    exit_block_rel( disp + pc + 4, pc+4 );
	    return 4;
	}
    }
:}
BRAF Rn {:  
    COUNT_INST(I_BRAF);
    if( sh4_x86.in_delay_slot ) {
	SLOTILLEGAL();
    } else {
	load_spreg( R_EAX, R_PC );
	ADD_imm32_r32( pc + 4 - sh4_x86.block_start_pc, R_EAX );
	ADD_sh4r_r32( REG_OFFSET(r[Rn]), R_EAX );
	store_spreg( R_EAX, R_NEW_PC );
	sh4_x86.in_delay_slot = DELAY_PC;
	sh4_x86.tstate = TSTATE_NONE;
	sh4_x86.branch_taken = TRUE;
	if( UNTRANSLATABLE(pc+2) ) {
	    exit_block_emu(pc+2);
	    return 2;
	} else {
	    sh4_translate_instruction( pc + 2 );
	    exit_block_newpcset(pc+2);
	    return 4;
	}
    }
:}
BSR disp {:  
    COUNT_INST(I_BSR);
    if( sh4_x86.in_delay_slot ) {
	SLOTILLEGAL();
    } else {
	load_spreg( R_EAX, R_PC );
	ADD_imm32_r32( pc + 4 - sh4_x86.block_start_pc, R_EAX );
	store_spreg( R_EAX, R_PR );
	sh4_x86.in_delay_slot = DELAY_PC;
	sh4_x86.branch_taken = TRUE;
	sh4_x86.tstate = TSTATE_NONE;
	if( UNTRANSLATABLE(pc+2) ) {
	    ADD_imm32_r32( disp, R_EAX );
	    store_spreg( R_EAX, R_NEW_PC );
	    exit_block_emu(pc+2);
	    return 2;
	} else {
	    sh4_translate_instruction( pc + 2 );
	    exit_block_rel( disp + pc + 4, pc+4 );
	    return 4;
	}
    }
:}
BSRF Rn {:  
    COUNT_INST(I_BSRF);
    if( sh4_x86.in_delay_slot ) {
	SLOTILLEGAL();
    } else {
	load_spreg( R_EAX, R_PC );
	ADD_imm32_r32( pc + 4 - sh4_x86.block_start_pc, R_EAX );
	store_spreg( R_EAX, R_PR );
	ADD_sh4r_r32( REG_OFFSET(r[Rn]), R_EAX );
	store_spreg( R_EAX, R_NEW_PC );

	sh4_x86.in_delay_slot = DELAY_PC;
	sh4_x86.tstate = TSTATE_NONE;
	sh4_x86.branch_taken = TRUE;
	if( UNTRANSLATABLE(pc+2) ) {
	    exit_block_emu(pc+2);
	    return 2;
	} else {
	    sh4_translate_instruction( pc + 2 );
	    exit_block_newpcset(pc+2);
	    return 4;
	}
    }
:}
BT disp {:
    COUNT_INST(I_BT);
    if( sh4_x86.in_delay_slot ) {
	SLOTILLEGAL();
    } else {
	sh4vma_t target = disp + pc + 4;
	JF_rel8( nottaken );
	exit_block_rel(target, pc+2 );
	JMP_TARGET(nottaken);
	return 2;
    }
:}
BT/S disp {:
    COUNT_INST(I_BTS);
    if( sh4_x86.in_delay_slot ) {
	SLOTILLEGAL();
    } else {
	sh4_x86.in_delay_slot = DELAY_PC;
	if( UNTRANSLATABLE(pc+2) ) {
	    load_imm32( R_EAX, pc + 4 - sh4_x86.block_start_pc );
	    JF_rel8(nottaken);
	    ADD_imm32_r32( disp, R_EAX );
	    JMP_TARGET(nottaken);
	    ADD_sh4r_r32( R_PC, R_EAX );
	    store_spreg( R_EAX, R_NEW_PC );
	    exit_block_emu(pc+2);
	    sh4_x86.branch_taken = TRUE;
	    return 2;
	} else {
	    if( sh4_x86.tstate == TSTATE_NONE ) {
		CMP_imm8s_sh4r( 1, R_T );
		sh4_x86.tstate = TSTATE_E;
	    }
	    OP(0x0F); OP(0x80+(sh4_x86.tstate^1)); uint32_t *patch = (uint32_t *)xlat_output; OP32(0); // JF rel32
	    int save_tstate = sh4_x86.tstate;
	    sh4_translate_instruction(pc+2);
	    exit_block_rel( disp + pc + 4, pc+4 );
	    // not taken
	    *patch = (xlat_output - ((uint8_t *)patch)) - 4;
	    sh4_x86.tstate = save_tstate;
	    sh4_translate_instruction(pc+2);
	    return 4;
	}
    }
:}
JMP @Rn {:  
    COUNT_INST(I_JMP);
    if( sh4_x86.in_delay_slot ) {
	SLOTILLEGAL();
    } else {
	load_reg( R_ECX, Rn );
	store_spreg( R_ECX, R_NEW_PC );
	sh4_x86.in_delay_slot = DELAY_PC;
	sh4_x86.branch_taken = TRUE;
	if( UNTRANSLATABLE(pc+2) ) {
	    exit_block_emu(pc+2);
	    return 2;
	} else {
	    sh4_translate_instruction(pc+2);
	    exit_block_newpcset(pc+2);
	    return 4;
	}
    }
:}
JSR @Rn {:  
    COUNT_INST(I_JSR);
    if( sh4_x86.in_delay_slot ) {
	SLOTILLEGAL();
    } else {
	load_spreg( R_EAX, R_PC );
	ADD_imm32_r32( pc + 4 - sh4_x86.block_start_pc, R_EAX );
	store_spreg( R_EAX, R_PR );
	load_reg( R_ECX, Rn );
	store_spreg( R_ECX, R_NEW_PC );
	sh4_x86.in_delay_slot = DELAY_PC;
	sh4_x86.branch_taken = TRUE;
	sh4_x86.tstate = TSTATE_NONE;
	if( UNTRANSLATABLE(pc+2) ) {
	    exit_block_emu(pc+2);
	    return 2;
	} else {
	    sh4_translate_instruction(pc+2);
	    exit_block_newpcset(pc+2);
	    return 4;
	}
    }
:}
RTE {:  
    COUNT_INST(I_RTE);
    if( sh4_x86.in_delay_slot ) {
	SLOTILLEGAL();
    } else {
	check_priv();
	load_spreg( R_ECX, R_SPC );
	store_spreg( R_ECX, R_NEW_PC );
	load_spreg( R_EAX, R_SSR );
	call_func1( sh4_write_sr, R_EAX );
	sh4_x86.in_delay_slot = DELAY_PC;
	sh4_x86.priv_checked = FALSE;
	sh4_x86.fpuen_checked = FALSE;
	sh4_x86.tstate = TSTATE_NONE;
	sh4_x86.branch_taken = TRUE;
	if( UNTRANSLATABLE(pc+2) ) {
	    exit_block_emu(pc+2);
	    return 2;
	} else {
	    sh4_translate_instruction(pc+2);
	    exit_block_newpcset(pc+2);
	    return 4;
	}
    }
:}
RTS {:  
    COUNT_INST(I_RTS);
    if( sh4_x86.in_delay_slot ) {
	SLOTILLEGAL();
    } else {
	load_spreg( R_ECX, R_PR );
	store_spreg( R_ECX, R_NEW_PC );
	sh4_x86.in_delay_slot = DELAY_PC;
	sh4_x86.branch_taken = TRUE;
	if( UNTRANSLATABLE(pc+2) ) {
	    exit_block_emu(pc+2);
	    return 2;
	} else {
	    sh4_translate_instruction(pc+2);
	    exit_block_newpcset(pc+2);
	    return 4;
	}
    }
:}
TRAPA #imm {:  
    COUNT_INST(I_TRAPA);
    if( sh4_x86.in_delay_slot ) {
	SLOTILLEGAL();
    } else {
	load_imm32( R_ECX, pc+2 - sh4_x86.block_start_pc );   // 5
	ADD_r32_sh4r( R_ECX, R_PC );
	load_imm32( R_EAX, imm );
	call_func1( sh4_raise_trap, R_EAX );
	sh4_x86.tstate = TSTATE_NONE;
	exit_block_pcset(pc);
	sh4_x86.branch_taken = TRUE;
	return 2;
    }
:}
UNDEF {:  
    COUNT_INST(I_UNDEF);
    if( sh4_x86.in_delay_slot ) {
	SLOTILLEGAL();
    } else {
	JMP_exc(EXC_ILLEGAL);
	return 2;
    }
:}

CLRMAC {:  
    COUNT_INST(I_CLRMAC);
    XOR_r32_r32(R_EAX, R_EAX);
    store_spreg( R_EAX, R_MACL );
    store_spreg( R_EAX, R_MACH );
    sh4_x86.tstate = TSTATE_NONE;
:}
CLRS {:
    COUNT_INST(I_CLRS);
    CLC();
    SETC_sh4r(R_S);
    sh4_x86.tstate = TSTATE_NONE;
:}
CLRT {:  
    COUNT_INST(I_CLRT);
    CLC();
    SETC_t();
    sh4_x86.tstate = TSTATE_C;
:}
SETS {:  
    COUNT_INST(I_SETS);
    STC();
    SETC_sh4r(R_S);
    sh4_x86.tstate = TSTATE_NONE;
:}
SETT {:  
    COUNT_INST(I_SETT);
    STC();
    SETC_t();
    sh4_x86.tstate = TSTATE_C;
:}

/* Floating point moves */
FMOV FRm, FRn {:  
    COUNT_INST(I_FMOV1);
    check_fpuen();
    if( sh4_x86.double_size ) {
        load_dr0( R_EAX, FRm );
        load_dr1( R_ECX, FRm );
        store_dr0( R_EAX, FRn );
        store_dr1( R_ECX, FRn );
    } else {
        load_fr( R_EAX, FRm ); // SZ=0 branch
        store_fr( R_EAX, FRn );
    }
:}
FMOV FRm, @Rn {: 
    COUNT_INST(I_FMOV2);
    check_fpuen();
    load_reg( R_EAX, Rn );
    if( sh4_x86.double_size ) {
        check_walign64( R_EAX );
        MMU_TRANSLATE_WRITE( R_EAX );
        load_dr0( R_EDX, FRm );
        load_dr1( R_ECX, FRm );
        MEM_WRITE_DOUBLE( R_EAX, R_EDX, R_ECX );
    } else {
        check_walign32( R_EAX );
        MMU_TRANSLATE_WRITE( R_EAX );
        load_fr( R_EDX, FRm );
        MEM_WRITE_LONG( R_EAX, R_EDX );
    }
    sh4_x86.tstate = TSTATE_NONE;
:}
FMOV @Rm, FRn {:  
    COUNT_INST(I_FMOV5);
    check_fpuen();
    load_reg( R_EAX, Rm );
    if( sh4_x86.double_size ) {
        check_ralign64( R_EAX );
        MMU_TRANSLATE_READ( R_EAX );
        MEM_READ_DOUBLE( R_EAX, R_EDX, R_EAX );
        store_dr0( R_EDX, FRn );
        store_dr1( R_EAX, FRn );    
    } else {
        check_ralign32( R_EAX );
        MMU_TRANSLATE_READ( R_EAX );
        MEM_READ_LONG( R_EAX, R_EAX );
        store_fr( R_EAX, FRn );
    }
    sh4_x86.tstate = TSTATE_NONE;
:}
FMOV FRm, @-Rn {:  
    COUNT_INST(I_FMOV3);
    check_fpuen();
    load_reg( R_EAX, Rn );
    if( sh4_x86.double_size ) {
        check_walign64( R_EAX );
        ADD_imm8s_r32(-8,R_EAX);
        MMU_TRANSLATE_WRITE( R_EAX );
        load_dr0( R_EDX, FRm );
        load_dr1( R_ECX, FRm );
        ADD_imm8s_sh4r(-8,REG_OFFSET(r[Rn]));
        MEM_WRITE_DOUBLE( R_EAX, R_EDX, R_ECX );
    } else {
        check_walign32( R_EAX );
        ADD_imm8s_r32( -4, R_EAX );
        MMU_TRANSLATE_WRITE( R_EAX );
        load_fr( R_EDX, FRm );
        ADD_imm8s_sh4r(-4,REG_OFFSET(r[Rn]));
        MEM_WRITE_LONG( R_EAX, R_EDX );
    }
    sh4_x86.tstate = TSTATE_NONE;
:}
FMOV @Rm+, FRn {:
    COUNT_INST(I_FMOV6);
    check_fpuen();
    load_reg( R_EAX, Rm );
    if( sh4_x86.double_size ) {
        check_ralign64( R_EAX );
        MMU_TRANSLATE_READ( R_EAX );
        ADD_imm8s_sh4r( 8, REG_OFFSET(r[Rm]) );
        MEM_READ_DOUBLE( R_EAX, R_EDX, R_EAX );
        store_dr0( R_EDX, FRn );
        store_dr1( R_EAX, FRn );
    } else {
        check_ralign32( R_EAX );
        MMU_TRANSLATE_READ( R_EAX );
        ADD_imm8s_sh4r( 4, REG_OFFSET(r[Rm]) );
        MEM_READ_LONG( R_EAX, R_EAX );
        store_fr( R_EAX, FRn );
    }
    sh4_x86.tstate = TSTATE_NONE;
:}
FMOV FRm, @(R0, Rn) {:  
    COUNT_INST(I_FMOV4);
    check_fpuen();
    load_reg( R_EAX, Rn );
    ADD_sh4r_r32( REG_OFFSET(r[0]), R_EAX );
    if( sh4_x86.double_size ) {
        check_walign64( R_EAX );
        MMU_TRANSLATE_WRITE( R_EAX );
        load_dr0( R_EDX, FRm );
        load_dr1( R_ECX, FRm );
        MEM_WRITE_DOUBLE( R_EAX, R_EDX, R_ECX );
    } else {
        check_walign32( R_EAX );
        MMU_TRANSLATE_WRITE( R_EAX );
        load_fr( R_EDX, FRm );
        MEM_WRITE_LONG( R_EAX, R_EDX ); // 12
    }
    sh4_x86.tstate = TSTATE_NONE;
:}
FMOV @(R0, Rm), FRn {:  
    COUNT_INST(I_FMOV7);
    check_fpuen();
    load_reg( R_EAX, Rm );
    ADD_sh4r_r32( REG_OFFSET(r[0]), R_EAX );
    if( sh4_x86.double_size ) {
        check_ralign64( R_EAX );
        MMU_TRANSLATE_READ( R_EAX );
        MEM_READ_DOUBLE( R_EAX, R_ECX, R_EAX );
        store_dr0( R_ECX, FRn );
        store_dr1( R_EAX, FRn );
    } else {
        check_ralign32( R_EAX );
        MMU_TRANSLATE_READ( R_EAX );
        MEM_READ_LONG( R_EAX, R_EAX );
        store_fr( R_EAX, FRn );
    }
    sh4_x86.tstate = TSTATE_NONE;
:}
FLDI0 FRn {:  /* IFF PR=0 */
    COUNT_INST(I_FLDI0);
    check_fpuen();
    if( sh4_x86.double_prec == 0 ) {
        XOR_r32_r32( R_EAX, R_EAX );
        store_fr( R_EAX, FRn );
    }
    sh4_x86.tstate = TSTATE_NONE;
:}
FLDI1 FRn {:  /* IFF PR=0 */
    COUNT_INST(I_FLDI1);
    check_fpuen();
    if( sh4_x86.double_prec == 0 ) {
        load_imm32(R_EAX, 0x3F800000);
        store_fr( R_EAX, FRn );
    }
:}

FLOAT FPUL, FRn {:  
    COUNT_INST(I_FLOAT);
    check_fpuen();
    FILD_sh4r(R_FPUL);
    if( sh4_x86.double_prec ) {
        pop_dr( FRn );
    } else {
        pop_fr( FRn );
    }
:}
FTRC FRm, FPUL {:  
    COUNT_INST(I_FTRC);
    check_fpuen();
    if( sh4_x86.double_prec ) {
        push_dr( FRm );
    } else {
        push_fr( FRm );
    }
    load_ptr( R_ECX, &max_int );
    FILD_r32ind( R_ECX );
    FCOMIP_st(1);
    JNA_rel8( sat );
    load_ptr( R_ECX, &min_int );  // 5
    FILD_r32ind( R_ECX );           // 2
    FCOMIP_st(1);                   // 2
    JAE_rel8( sat2 );            // 2
    load_ptr( R_EAX, &save_fcw );
    FNSTCW_r32ind( R_EAX );
    load_ptr( R_EDX, &trunc_fcw );
    FLDCW_r32ind( R_EDX );
    FISTP_sh4r(R_FPUL);             // 3
    FLDCW_r32ind( R_EAX );
    JMP_rel8(end);             // 2

    JMP_TARGET(sat);
    JMP_TARGET(sat2);
    MOV_r32ind_r32( R_ECX, R_ECX ); // 2
    store_spreg( R_ECX, R_FPUL );
    FPOP_st();
    JMP_TARGET(end);
    sh4_x86.tstate = TSTATE_NONE;
:}
FLDS FRm, FPUL {:  
    COUNT_INST(I_FLDS);
    check_fpuen();
    load_fr( R_EAX, FRm );
    store_spreg( R_EAX, R_FPUL );
:}
FSTS FPUL, FRn {:  
    COUNT_INST(I_FSTS);
    check_fpuen();
    load_spreg( R_EAX, R_FPUL );
    store_fr( R_EAX, FRn );
:}
FCNVDS FRm, FPUL {:  
    COUNT_INST(I_FCNVDS);
    check_fpuen();
    if( sh4_x86.double_prec ) {
        push_dr( FRm );
        pop_fpul();
    }
:}
FCNVSD FPUL, FRn {:  
    COUNT_INST(I_FCNVSD);
    check_fpuen();
    if( sh4_x86.double_prec ) {
        push_fpul();
        pop_dr( FRn );
    }
:}

/* Floating point instructions */
FABS FRn {:  
    COUNT_INST(I_FABS);
    check_fpuen();
    if( sh4_x86.double_prec ) {
        push_dr(FRn);
        FABS_st0();
        pop_dr(FRn);
    } else {
        push_fr(FRn);
        FABS_st0();
        pop_fr(FRn);
    }
:}
FADD FRm, FRn {:  
    COUNT_INST(I_FADD);
    check_fpuen();
    if( sh4_x86.double_prec ) {
        push_dr(FRm);
        push_dr(FRn);
        FADDP_st(1);
        pop_dr(FRn);
    } else {
        push_fr(FRm);
        push_fr(FRn);
        FADDP_st(1);
        pop_fr(FRn);
    }
:}
FDIV FRm, FRn {:  
    COUNT_INST(I_FDIV);
    check_fpuen();
    if( sh4_x86.double_prec ) {
        push_dr(FRn);
        push_dr(FRm);
        FDIVP_st(1);
        pop_dr(FRn);
    } else {
        push_fr(FRn);
        push_fr(FRm);
        FDIVP_st(1);
        pop_fr(FRn);
    }
:}
FMAC FR0, FRm, FRn {:  
    COUNT_INST(I_FMAC);
    check_fpuen();
    if( sh4_x86.double_prec ) {
        push_dr( 0 );
        push_dr( FRm );
        FMULP_st(1);
        push_dr( FRn );
        FADDP_st(1);
        pop_dr( FRn );
    } else {
        push_fr( 0 );
        push_fr( FRm );
        FMULP_st(1);
        push_fr( FRn );
        FADDP_st(1);
        pop_fr( FRn );
    }
:}

FMUL FRm, FRn {:  
    COUNT_INST(I_FMUL);
    check_fpuen();
    if( sh4_x86.double_prec ) {
        push_dr(FRm);
        push_dr(FRn);
        FMULP_st(1);
        pop_dr(FRn);
    } else {
        push_fr(FRm);
        push_fr(FRn);
        FMULP_st(1);
        pop_fr(FRn);
    }
:}
FNEG FRn {:  
    COUNT_INST(I_FNEG);
    check_fpuen();
    if( sh4_x86.double_prec ) {
        push_dr(FRn);
        FCHS_st0();
        pop_dr(FRn);
    } else {
        push_fr(FRn);
        FCHS_st0();
        pop_fr(FRn);
    }
:}
FSRRA FRn {:  
    COUNT_INST(I_FSRRA);
    check_fpuen();
    if( sh4_x86.double_prec == 0 ) {
        FLD1_st0();
        push_fr(FRn);
        FSQRT_st0();
        FDIVP_st(1);
        pop_fr(FRn);
    }
:}
FSQRT FRn {:  
    COUNT_INST(I_FSQRT);
    check_fpuen();
    if( sh4_x86.double_prec ) {
        push_dr(FRn);
        FSQRT_st0();
        pop_dr(FRn);
    } else {
        push_fr(FRn);
        FSQRT_st0();
        pop_fr(FRn);
    }
:}
FSUB FRm, FRn {:  
    COUNT_INST(I_FSUB);
    check_fpuen();
    if( sh4_x86.double_prec ) {
        push_dr(FRn);
        push_dr(FRm);
        FSUBP_st(1);
        pop_dr(FRn);
    } else {
        push_fr(FRn);
        push_fr(FRm);
        FSUBP_st(1);
        pop_fr(FRn);
    }
:}

FCMP/EQ FRm, FRn {:  
    COUNT_INST(I_FCMPEQ);
    check_fpuen();
    if( sh4_x86.double_prec ) {
        push_dr(FRm);
        push_dr(FRn);
    } else {
        push_fr(FRm);
        push_fr(FRn);
    }
    FCOMIP_st(1);
    SETE_t();
    FPOP_st();
    sh4_x86.tstate = TSTATE_E;
:}
FCMP/GT FRm, FRn {:  
    COUNT_INST(I_FCMPGT);
    check_fpuen();
    if( sh4_x86.double_prec ) {
        push_dr(FRm);
        push_dr(FRn);
    } else {
        push_fr(FRm);
        push_fr(FRn);
    }
    FCOMIP_st(1);
    SETA_t();
    FPOP_st();
    sh4_x86.tstate = TSTATE_A;
:}

FSCA FPUL, FRn {:  
    COUNT_INST(I_FSCA);
    check_fpuen();
    if( sh4_x86.double_prec == 0 ) {
        LEA_sh4r_rptr( REG_OFFSET(fr[0][FRn&0x0E]), R_EDX );
        load_spreg( R_EAX, R_FPUL );
        call_func2( sh4_fsca, R_EAX, R_EDX );
    }
    sh4_x86.tstate = TSTATE_NONE;
:}
FIPR FVm, FVn {:  
    COUNT_INST(I_FIPR);
    check_fpuen();
    if( sh4_x86.double_prec == 0 ) {
        if( sh4_x86.sse3_enabled ) {
            MOVAPS_sh4r_xmm( REG_OFFSET(fr[0][FVm<<2]), 4 );
            MULPS_sh4r_xmm( REG_OFFSET(fr[0][FVn<<2]), 4 );
            HADDPS_xmm_xmm( 4, 4 ); 
            HADDPS_xmm_xmm( 4, 4 );
            MOVSS_xmm_sh4r( 4, REG_OFFSET(fr[0][(FVn<<2)+2]) );
        } else {
            push_fr( FVm<<2 );
            push_fr( FVn<<2 );
            FMULP_st(1);
            push_fr( (FVm<<2)+1);
            push_fr( (FVn<<2)+1);
            FMULP_st(1);
            FADDP_st(1);
            push_fr( (FVm<<2)+2);
            push_fr( (FVn<<2)+2);
            FMULP_st(1);
            FADDP_st(1);
            push_fr( (FVm<<2)+3);
            push_fr( (FVn<<2)+3);
            FMULP_st(1);
            FADDP_st(1);
            pop_fr( (FVn<<2)+3);
        }
    }
:}
FTRV XMTRX, FVn {:  
    COUNT_INST(I_FTRV);
    check_fpuen();
    if( sh4_x86.double_prec == 0 ) {
        if( sh4_x86.sse3_enabled ) {
            MOVAPS_sh4r_xmm( REG_OFFSET(fr[1][0]), 1 ); // M1  M0  M3  M2
            MOVAPS_sh4r_xmm( REG_OFFSET(fr[1][4]), 0 ); // M5  M4  M7  M6
            MOVAPS_sh4r_xmm( REG_OFFSET(fr[1][8]), 3 ); // M9  M8  M11 M10
            MOVAPS_sh4r_xmm( REG_OFFSET(fr[1][12]), 2 );// M13 M12 M15 M14

            MOVSLDUP_sh4r_xmm( REG_OFFSET(fr[0][FVn<<2]), 4 ); // V1 V1 V3 V3
            MOVSHDUP_sh4r_xmm( REG_OFFSET(fr[0][FVn<<2]), 5 ); // V0 V0 V2 V2
            MOVAPS_xmm_xmm( 4, 6 );
            MOVAPS_xmm_xmm( 5, 7 );
            MOVLHPS_xmm_xmm( 4, 4 );  // V1 V1 V1 V1
            MOVHLPS_xmm_xmm( 6, 6 );  // V3 V3 V3 V3
            MOVLHPS_xmm_xmm( 5, 5 );  // V0 V0 V0 V0
            MOVHLPS_xmm_xmm( 7, 7 );  // V2 V2 V2 V2
            MULPS_xmm_xmm( 0, 4 );
            MULPS_xmm_xmm( 1, 5 );
            MULPS_xmm_xmm( 2, 6 );
            MULPS_xmm_xmm( 3, 7 );
            ADDPS_xmm_xmm( 5, 4 );
            ADDPS_xmm_xmm( 7, 6 );
            ADDPS_xmm_xmm( 6, 4 );
            MOVAPS_xmm_sh4r( 4, REG_OFFSET(fr[0][FVn<<2]) );
        } else {
            LEA_sh4r_rptr( REG_OFFSET(fr[0][FVn<<2]), R_EAX );
            call_func1( sh4_ftrv, R_EAX );
        }
    }
    sh4_x86.tstate = TSTATE_NONE;
:}

FRCHG {:  
    COUNT_INST(I_FRCHG);
    check_fpuen();
    load_spreg( R_ECX, R_FPSCR );
    XOR_imm32_r32( FPSCR_FR, R_ECX );
    store_spreg( R_ECX, R_FPSCR );
    call_func0( sh4_switch_fr_banks );
    sh4_x86.tstate = TSTATE_NONE;
:}
FSCHG {:  
    COUNT_INST(I_FSCHG);
    check_fpuen();
    load_spreg( R_ECX, R_FPSCR );
    XOR_imm32_r32( FPSCR_SZ, R_ECX );
    store_spreg( R_ECX, R_FPSCR );
    sh4_x86.tstate = TSTATE_NONE;
    sh4_x86.double_size = !sh4_x86.double_size;
:}

/* Processor control instructions */
LDC Rm, SR {:
    COUNT_INST(I_LDCSR);
    if( sh4_x86.in_delay_slot ) {
	SLOTILLEGAL();
    } else {
	check_priv();
	load_reg( R_EAX, Rm );
	call_func1( sh4_write_sr, R_EAX );
	sh4_x86.priv_checked = FALSE;
	sh4_x86.fpuen_checked = FALSE;
	sh4_x86.tstate = TSTATE_NONE;
    }
:}
LDC Rm, GBR {: 
    COUNT_INST(I_LDC);
    load_reg( R_EAX, Rm );
    store_spreg( R_EAX, R_GBR );
:}
LDC Rm, VBR {:  
    COUNT_INST(I_LDC);
    check_priv();
    load_reg( R_EAX, Rm );
    store_spreg( R_EAX, R_VBR );
    sh4_x86.tstate = TSTATE_NONE;
:}
LDC Rm, SSR {:  
    COUNT_INST(I_LDC);
    check_priv();
    load_reg( R_EAX, Rm );
    store_spreg( R_EAX, R_SSR );
    sh4_x86.tstate = TSTATE_NONE;
:}
LDC Rm, SGR {:  
    COUNT_INST(I_LDC);
    check_priv();
    load_reg( R_EAX, Rm );
    store_spreg( R_EAX, R_SGR );
    sh4_x86.tstate = TSTATE_NONE;
:}
LDC Rm, SPC {:  
    COUNT_INST(I_LDC);
    check_priv();
    load_reg( R_EAX, Rm );
    store_spreg( R_EAX, R_SPC );
    sh4_x86.tstate = TSTATE_NONE;
:}
LDC Rm, DBR {:  
    COUNT_INST(I_LDC);
    check_priv();
    load_reg( R_EAX, Rm );
    store_spreg( R_EAX, R_DBR );
    sh4_x86.tstate = TSTATE_NONE;
:}
LDC Rm, Rn_BANK {:  
    COUNT_INST(I_LDC);
    check_priv();
    load_reg( R_EAX, Rm );
    store_spreg( R_EAX, REG_OFFSET(r_bank[Rn_BANK]) );
    sh4_x86.tstate = TSTATE_NONE;
:}
LDC.L @Rm+, GBR {:  
    COUNT_INST(I_LDCM);
    load_reg( R_EAX, Rm );
    check_ralign32( R_EAX );
    MMU_TRANSLATE_READ( R_EAX );
    ADD_imm8s_sh4r( 4, REG_OFFSET(r[Rm]) );
    MEM_READ_LONG( R_EAX, R_EAX );
    store_spreg( R_EAX, R_GBR );
    sh4_x86.tstate = TSTATE_NONE;
:}
LDC.L @Rm+, SR {:
    COUNT_INST(I_LDCSRM);
    if( sh4_x86.in_delay_slot ) {
	SLOTILLEGAL();
    } else {
	check_priv();
	load_reg( R_EAX, Rm );
	check_ralign32( R_EAX );
	MMU_TRANSLATE_READ( R_EAX );
	ADD_imm8s_sh4r( 4, REG_OFFSET(r[Rm]) );
	MEM_READ_LONG( R_EAX, R_EAX );
	call_func1( sh4_write_sr, R_EAX );
	sh4_x86.priv_checked = FALSE;
	sh4_x86.fpuen_checked = FALSE;
	sh4_x86.tstate = TSTATE_NONE;
    }
:}
LDC.L @Rm+, VBR {:  
    COUNT_INST(I_LDCM);
    check_priv();
    load_reg( R_EAX, Rm );
    check_ralign32( R_EAX );
    MMU_TRANSLATE_READ( R_EAX );
    ADD_imm8s_sh4r( 4, REG_OFFSET(r[Rm]) );
    MEM_READ_LONG( R_EAX, R_EAX );
    store_spreg( R_EAX, R_VBR );
    sh4_x86.tstate = TSTATE_NONE;
:}
LDC.L @Rm+, SSR {:
    COUNT_INST(I_LDCM);
    check_priv();
    load_reg( R_EAX, Rm );
    check_ralign32( R_EAX );
    MMU_TRANSLATE_READ( R_EAX );
    ADD_imm8s_sh4r( 4, REG_OFFSET(r[Rm]) );
    MEM_READ_LONG( R_EAX, R_EAX );
    store_spreg( R_EAX, R_SSR );
    sh4_x86.tstate = TSTATE_NONE;
:}
LDC.L @Rm+, SGR {:  
    COUNT_INST(I_LDCM);
    check_priv();
    load_reg( R_EAX, Rm );
    check_ralign32( R_EAX );
    MMU_TRANSLATE_READ( R_EAX );
    ADD_imm8s_sh4r( 4, REG_OFFSET(r[Rm]) );
    MEM_READ_LONG( R_EAX, R_EAX );
    store_spreg( R_EAX, R_SGR );
    sh4_x86.tstate = TSTATE_NONE;
:}
LDC.L @Rm+, SPC {:  
    COUNT_INST(I_LDCM);
    check_priv();
    load_reg( R_EAX, Rm );
    check_ralign32( R_EAX );
    MMU_TRANSLATE_READ( R_EAX );
    ADD_imm8s_sh4r( 4, REG_OFFSET(r[Rm]) );
    MEM_READ_LONG( R_EAX, R_EAX );
    store_spreg( R_EAX, R_SPC );
    sh4_x86.tstate = TSTATE_NONE;
:}
LDC.L @Rm+, DBR {:  
    COUNT_INST(I_LDCM);
    check_priv();
    load_reg( R_EAX, Rm );
    check_ralign32( R_EAX );
    MMU_TRANSLATE_READ( R_EAX );
    ADD_imm8s_sh4r( 4, REG_OFFSET(r[Rm]) );
    MEM_READ_LONG( R_EAX, R_EAX );
    store_spreg( R_EAX, R_DBR );
    sh4_x86.tstate = TSTATE_NONE;
:}
LDC.L @Rm+, Rn_BANK {:  
    COUNT_INST(I_LDCM);
    check_priv();
    load_reg( R_EAX, Rm );
    check_ralign32( R_EAX );
    MMU_TRANSLATE_READ( R_EAX );
    ADD_imm8s_sh4r( 4, REG_OFFSET(r[Rm]) );
    MEM_READ_LONG( R_EAX, R_EAX );
    store_spreg( R_EAX, REG_OFFSET(r_bank[Rn_BANK]) );
    sh4_x86.tstate = TSTATE_NONE;
:}
LDS Rm, FPSCR {:
    COUNT_INST(I_LDSFPSCR);
    check_fpuen();
    load_reg( R_EAX, Rm );
    call_func1( sh4_write_fpscr, R_EAX );
    sh4_x86.tstate = TSTATE_NONE;
    return 2;
:}
LDS.L @Rm+, FPSCR {:  
    COUNT_INST(I_LDSFPSCRM);
    check_fpuen();
    load_reg( R_EAX, Rm );
    check_ralign32( R_EAX );
    MMU_TRANSLATE_READ( R_EAX );
    ADD_imm8s_sh4r( 4, REG_OFFSET(r[Rm]) );
    MEM_READ_LONG( R_EAX, R_EAX );
    call_func1( sh4_write_fpscr, R_EAX );
    sh4_x86.tstate = TSTATE_NONE;
    return 2;
:}
LDS Rm, FPUL {:  
    COUNT_INST(I_LDS);
    check_fpuen();
    load_reg( R_EAX, Rm );
    store_spreg( R_EAX, R_FPUL );
:}
LDS.L @Rm+, FPUL {:  
    COUNT_INST(I_LDSM);
    check_fpuen();
    load_reg( R_EAX, Rm );
    check_ralign32( R_EAX );
    MMU_TRANSLATE_READ( R_EAX );
    ADD_imm8s_sh4r( 4, REG_OFFSET(r[Rm]) );
    MEM_READ_LONG( R_EAX, R_EAX );
    store_spreg( R_EAX, R_FPUL );
    sh4_x86.tstate = TSTATE_NONE;
:}
LDS Rm, MACH {: 
    COUNT_INST(I_LDS);
    load_reg( R_EAX, Rm );
    store_spreg( R_EAX, R_MACH );
:}
LDS.L @Rm+, MACH {:  
    COUNT_INST(I_LDSM);
    load_reg( R_EAX, Rm );
    check_ralign32( R_EAX );
    MMU_TRANSLATE_READ( R_EAX );
    ADD_imm8s_sh4r( 4, REG_OFFSET(r[Rm]) );
    MEM_READ_LONG( R_EAX, R_EAX );
    store_spreg( R_EAX, R_MACH );
    sh4_x86.tstate = TSTATE_NONE;
:}
LDS Rm, MACL {:  
    COUNT_INST(I_LDS);
    load_reg( R_EAX, Rm );
    store_spreg( R_EAX, R_MACL );
:}
LDS.L @Rm+, MACL {:  
    COUNT_INST(I_LDSM);
    load_reg( R_EAX, Rm );
    check_ralign32( R_EAX );
    MMU_TRANSLATE_READ( R_EAX );
    ADD_imm8s_sh4r( 4, REG_OFFSET(r[Rm]) );
    MEM_READ_LONG( R_EAX, R_EAX );
    store_spreg( R_EAX, R_MACL );
    sh4_x86.tstate = TSTATE_NONE;
:}
LDS Rm, PR {:  
    COUNT_INST(I_LDS);
    load_reg( R_EAX, Rm );
    store_spreg( R_EAX, R_PR );
:}
LDS.L @Rm+, PR {:  
    COUNT_INST(I_LDSM);
    load_reg( R_EAX, Rm );
    check_ralign32( R_EAX );
    MMU_TRANSLATE_READ( R_EAX );
    ADD_imm8s_sh4r( 4, REG_OFFSET(r[Rm]) );
    MEM_READ_LONG( R_EAX, R_EAX );
    store_spreg( R_EAX, R_PR );
    sh4_x86.tstate = TSTATE_NONE;
:}
LDTLB {:  
    COUNT_INST(I_LDTLB);
    call_func0( MMU_ldtlb );
    sh4_x86.tstate = TSTATE_NONE;
:}
OCBI @Rn {:
    COUNT_INST(I_OCBI);
:}
OCBP @Rn {:
    COUNT_INST(I_OCBP);
:}
OCBWB @Rn {:
    COUNT_INST(I_OCBWB);
:}
PREF @Rn {:
    COUNT_INST(I_PREF);
    load_reg( R_EAX, Rn );
    MOV_r32_r32( R_EAX, R_ECX );
    AND_imm32_r32( 0xFC000000, R_ECX );
    CMP_imm32_r32( 0xE0000000, R_ECX );
    JNE_rel8(end);
    if( sh4_x86.tlb_on ) {
    	call_func1( sh4_flush_store_queue_mmu, R_EAX );
        TEST_r32_r32( R_EAX, R_EAX );
        JE_exc(-1);
    } else {
    	call_func1( sh4_flush_store_queue, R_EAX );
   	}
    JMP_TARGET(end);
    sh4_x86.tstate = TSTATE_NONE;
:}
SLEEP {: 
    COUNT_INST(I_SLEEP);
    check_priv();
    call_func0( sh4_sleep );
    sh4_x86.tstate = TSTATE_NONE;
    sh4_x86.in_delay_slot = DELAY_NONE;
    return 2;
:}
STC SR, Rn {:
    COUNT_INST(I_STCSR);
    check_priv();
    call_func0(sh4_read_sr);
    store_reg( R_EAX, Rn );
    sh4_x86.tstate = TSTATE_NONE;
:}
STC GBR, Rn {:  
    COUNT_INST(I_STC);
    load_spreg( R_EAX, R_GBR );
    store_reg( R_EAX, Rn );
:}
STC VBR, Rn {:  
    COUNT_INST(I_STC);
    check_priv();
    load_spreg( R_EAX, R_VBR );
    store_reg( R_EAX, Rn );
    sh4_x86.tstate = TSTATE_NONE;
:}
STC SSR, Rn {:  
    COUNT_INST(I_STC);
    check_priv();
    load_spreg( R_EAX, R_SSR );
    store_reg( R_EAX, Rn );
    sh4_x86.tstate = TSTATE_NONE;
:}
STC SPC, Rn {:  
    COUNT_INST(I_STC);
    check_priv();
    load_spreg( R_EAX, R_SPC );
    store_reg( R_EAX, Rn );
    sh4_x86.tstate = TSTATE_NONE;
:}
STC SGR, Rn {:  
    COUNT_INST(I_STC);
    check_priv();
    load_spreg( R_EAX, R_SGR );
    store_reg( R_EAX, Rn );
    sh4_x86.tstate = TSTATE_NONE;
:}
STC DBR, Rn {:  
    COUNT_INST(I_STC);
    check_priv();
    load_spreg( R_EAX, R_DBR );
    store_reg( R_EAX, Rn );
    sh4_x86.tstate = TSTATE_NONE;
:}
STC Rm_BANK, Rn {:
    COUNT_INST(I_STC);
    check_priv();
    load_spreg( R_EAX, REG_OFFSET(r_bank[Rm_BANK]) );
    store_reg( R_EAX, Rn );
    sh4_x86.tstate = TSTATE_NONE;
:}
STC.L SR, @-Rn {:
    COUNT_INST(I_STCSRM);
    check_priv();
    load_reg( R_EAX, Rn );
    check_walign32( R_EAX );
    ADD_imm8s_r32( -4, R_EAX );
    MMU_TRANSLATE_WRITE( R_EAX );
    MOV_r32_esp8( R_EAX, 0 );
    call_func0( sh4_read_sr );
    MOV_r32_r32( R_EAX, R_EDX );
    MOV_esp8_r32( 0, R_EAX );
    ADD_imm8s_sh4r( -4, REG_OFFSET(r[Rn]) );
    MEM_WRITE_LONG( R_EAX, R_EDX );
    sh4_x86.tstate = TSTATE_NONE;
:}
STC.L VBR, @-Rn {:  
    COUNT_INST(I_STCM);
    check_priv();
    load_reg( R_EAX, Rn );
    check_walign32( R_EAX );
    ADD_imm8s_r32( -4, R_EAX );
    MMU_TRANSLATE_WRITE( R_EAX );
    load_spreg( R_EDX, R_VBR );
    ADD_imm8s_sh4r( -4, REG_OFFSET(r[Rn]) );
    MEM_WRITE_LONG( R_EAX, R_EDX );
    sh4_x86.tstate = TSTATE_NONE;
:}
STC.L SSR, @-Rn {:  
    COUNT_INST(I_STCM);
    check_priv();
    load_reg( R_EAX, Rn );
    check_walign32( R_EAX );
    ADD_imm8s_r32( -4, R_EAX );
    MMU_TRANSLATE_WRITE( R_EAX );
    load_spreg( R_EDX, R_SSR );
    ADD_imm8s_sh4r( -4, REG_OFFSET(r[Rn]) );
    MEM_WRITE_LONG( R_EAX, R_EDX );
    sh4_x86.tstate = TSTATE_NONE;
:}
STC.L SPC, @-Rn {:
    COUNT_INST(I_STCM);
    check_priv();
    load_reg( R_EAX, Rn );
    check_walign32( R_EAX );
    ADD_imm8s_r32( -4, R_EAX );
    MMU_TRANSLATE_WRITE( R_EAX );
    load_spreg( R_EDX, R_SPC );
    ADD_imm8s_sh4r( -4, REG_OFFSET(r[Rn]) );
    MEM_WRITE_LONG( R_EAX, R_EDX );
    sh4_x86.tstate = TSTATE_NONE;
:}
STC.L SGR, @-Rn {:  
    COUNT_INST(I_STCM);
    check_priv();
    load_reg( R_EAX, Rn );
    check_walign32( R_EAX );
    ADD_imm8s_r32( -4, R_EAX );
    MMU_TRANSLATE_WRITE( R_EAX );
    load_spreg( R_EDX, R_SGR );
    ADD_imm8s_sh4r( -4, REG_OFFSET(r[Rn]) );
    MEM_WRITE_LONG( R_EAX, R_EDX );
    sh4_x86.tstate = TSTATE_NONE;
:}
STC.L DBR, @-Rn {:  
    COUNT_INST(I_STCM);
    check_priv();
    load_reg( R_EAX, Rn );
    check_walign32( R_EAX );
    ADD_imm8s_r32( -4, R_EAX );
    MMU_TRANSLATE_WRITE( R_EAX );
    load_spreg( R_EDX, R_DBR );
    ADD_imm8s_sh4r( -4, REG_OFFSET(r[Rn]) );
    MEM_WRITE_LONG( R_EAX, R_EDX );
    sh4_x86.tstate = TSTATE_NONE;
:}
STC.L Rm_BANK, @-Rn {:  
    COUNT_INST(I_STCM);
    check_priv();
    load_reg( R_EAX, Rn );
    check_walign32( R_EAX );
    ADD_imm8s_r32( -4, R_EAX );
    MMU_TRANSLATE_WRITE( R_EAX );
    load_spreg( R_EDX, REG_OFFSET(r_bank[Rm_BANK]) );
    ADD_imm8s_sh4r( -4, REG_OFFSET(r[Rn]) );
    MEM_WRITE_LONG( R_EAX, R_EDX );
    sh4_x86.tstate = TSTATE_NONE;
:}
STC.L GBR, @-Rn {:  
    COUNT_INST(I_STCM);
    load_reg( R_EAX, Rn );
    check_walign32( R_EAX );
    ADD_imm8s_r32( -4, R_EAX );
    MMU_TRANSLATE_WRITE( R_EAX );
    load_spreg( R_EDX, R_GBR );
    ADD_imm8s_sh4r( -4, REG_OFFSET(r[Rn]) );
    MEM_WRITE_LONG( R_EAX, R_EDX );
    sh4_x86.tstate = TSTATE_NONE;
:}
STS FPSCR, Rn {:  
    COUNT_INST(I_STSFPSCR);
    check_fpuen();
    load_spreg( R_EAX, R_FPSCR );
    store_reg( R_EAX, Rn );
:}
STS.L FPSCR, @-Rn {:  
    COUNT_INST(I_STSFPSCRM);
    check_fpuen();
    load_reg( R_EAX, Rn );
    check_walign32( R_EAX );
    ADD_imm8s_r32( -4, R_EAX );
    MMU_TRANSLATE_WRITE( R_EAX );
    load_spreg( R_EDX, R_FPSCR );
    ADD_imm8s_sh4r( -4, REG_OFFSET(r[Rn]) );
    MEM_WRITE_LONG( R_EAX, R_EDX );
    sh4_x86.tstate = TSTATE_NONE;
:}
STS FPUL, Rn {:  
    COUNT_INST(I_STS);
    check_fpuen();
    load_spreg( R_EAX, R_FPUL );
    store_reg( R_EAX, Rn );
:}
STS.L FPUL, @-Rn {:  
    COUNT_INST(I_STSM);
    check_fpuen();
    load_reg( R_EAX, Rn );
    check_walign32( R_EAX );
    ADD_imm8s_r32( -4, R_EAX );
    MMU_TRANSLATE_WRITE( R_EAX );
    load_spreg( R_EDX, R_FPUL );
    ADD_imm8s_sh4r( -4, REG_OFFSET(r[Rn]) );
    MEM_WRITE_LONG( R_EAX, R_EDX );
    sh4_x86.tstate = TSTATE_NONE;
:}
STS MACH, Rn {:  
    COUNT_INST(I_STS);
    load_spreg( R_EAX, R_MACH );
    store_reg( R_EAX, Rn );
:}
STS.L MACH, @-Rn {:  
    COUNT_INST(I_STSM);
    load_reg( R_EAX, Rn );
    check_walign32( R_EAX );
    ADD_imm8s_r32( -4, R_EAX );
    MMU_TRANSLATE_WRITE( R_EAX );
    load_spreg( R_EDX, R_MACH );
    ADD_imm8s_sh4r( -4, REG_OFFSET(r[Rn]) );
    MEM_WRITE_LONG( R_EAX, R_EDX );
    sh4_x86.tstate = TSTATE_NONE;
:}
STS MACL, Rn {:  
    COUNT_INST(I_STS);
    load_spreg( R_EAX, R_MACL );
    store_reg( R_EAX, Rn );
:}
STS.L MACL, @-Rn {:  
    COUNT_INST(I_STSM);
    load_reg( R_EAX, Rn );
    check_walign32( R_EAX );
    ADD_imm8s_r32( -4, R_EAX );
    MMU_TRANSLATE_WRITE( R_EAX );
    load_spreg( R_EDX, R_MACL );
    ADD_imm8s_sh4r( -4, REG_OFFSET(r[Rn]) );
    MEM_WRITE_LONG( R_EAX, R_EDX );
    sh4_x86.tstate = TSTATE_NONE;
:}
STS PR, Rn {:  
    COUNT_INST(I_STS);
    load_spreg( R_EAX, R_PR );
    store_reg( R_EAX, Rn );
:}
STS.L PR, @-Rn {:  
    COUNT_INST(I_STSM);
    load_reg( R_EAX, Rn );
    check_walign32( R_EAX );
    ADD_imm8s_r32( -4, R_EAX );
    MMU_TRANSLATE_WRITE( R_EAX );
    load_spreg( R_EDX, R_PR );
    ADD_imm8s_sh4r( -4, REG_OFFSET(r[Rn]) );
    MEM_WRITE_LONG( R_EAX, R_EDX );
    sh4_x86.tstate = TSTATE_NONE;
:}

NOP {: 
    COUNT_INST(I_NOP);
    /* Do nothing. Well, we could emit an 0x90, but what would really be the point? */ 
:}
%%
    sh4_x86.in_delay_slot = DELAY_NONE;
    return 0;
}
