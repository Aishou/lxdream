dnl Process this file with autoconf to produce a configure script.

AC_INIT(configure.in)
AM_INIT_AUTOMAKE(lxdream, 0.8.1)
AM_MAINTAINER_MODE
AM_CONFIG_HEADER(config.h)

AC_ISC_POSIX
AC_PROG_CC
AM_PROG_CC_STDC
AM_PROG_AS
AC_HEADER_STDC
AC_CANONICAL_BUILD
AC_CANONICAL_HOST
AC_ARG_ENABLE( trace, 
   AS_HELP_STRING( [--enable-trace], [Enable generation of IO traces (warning: hurts performance)]),
   [if test "$enableval" == "yes"; then
     AC_DEFINE(ENABLE_TRACE_IO, 1, [Enable IO tracing])
    fi] )
AC_ARG_ENABLE( watch,
   AS_HELP_STRING( [--enable-watch], [Enable watchpoints in the debugger (warning: hurts performance)]),
   [if test "$enableval" == "yes"; then
     AC_DEFINE(ENABLE_WATCH, 1, [Enable watchpoints])
   fi] )
AC_ARG_WITH( osmesa,
   AS_HELP_STRING( [--with-osmesa], [Build with the osmesa GL library (software rendering)]),
   [], [with_osmesa=no])


dnl ------------ Check if we're building on Darwn --------------

dnl For starters, do we have a working objective-c compiler?
lxdream_save_cppflags="$CPPFLAGS"
CPPFLAGS="$CPPFLAGS -x objective-c"
AC_TRY_COMPILE([@interface Foo @end],, [

   AC_CHECK_HEADER([Cocoa/Cocoa.h], [
      HAVE_COCOA='yes'
      APPLE_BUILD='yes'
      LIBS="$LIBS -framework AppKit"
      LIBS="$LIBS -Wl,-dylib_file,/System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGL.dylib:/System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGL.dylib -framework OpenGL"
      AC_DEFINE(HAVE_COCOA,[1],[Have Cocoa framework])
      AC_DEFINE(APPLE_BUILD,[1],[Building on an apple platform. Things are different...])
   ])

], [CPPFLAGS="$lxdream_save_cppflags"] )
AM_CONDITIONAL(GUI_COCOA, [test "$HAVE_COCOA" = 'yes'])

dnl ----------- Check for mandatory dependencies --------------
dnl Check for libpng (required)
PKG_CHECK_MODULES(LIBPNG, [libpng] )

dnl Implied by libpng, but check explicitly just in case
AC_CHECK_LIB(z, uncompress, [], [
    echo "Zlib (libz.so) could not be found, but is required."
    exit 1])


dnl Check for GTK (currently compulsory)
PKG_CHECK_MODULES(GTK, gtk+-2.0, [
    HAVE_GTK='yes'
    AC_DEFINE([HAVE_GTK],1,[Have GTK libraries])
])
AM_CONDITIONAL(GUI_GTK, [test "$HAVE_GTK" = 'yes'])

dnl Which GTK port do we have?
LIBS="$LIBS $GTK_LIBS"
AC_CHECK_FUNC(gdk_x11_display_get_xdisplay, [ 
   HAVE_GTK_X11='yes'
   AC_DEFINE([HAVE_GTK_X11],1,[Building with GTK+X11]) ], [])
AC_CHECK_FUNC(gdk_quartz_window_get_nsview, [ 
   HAVE_GTK_OSX='yes'
   AC_DEFINE([HAVE_GTK_OSX],1,[Building with GTK+Cocoa]) ], [])

dnl ------------------ Video driver support -------------------
AS_IF([test "x$with_osmesa" != xno], [ 

dnl User requested OSMesa (ie pure software rendering)
  AC_CHECK_LIB([OSMesa], [OSMesaCreateContext], [],
    [AC_MSG_FAILURE( [--with-osmesa was given, but OSMesa library could not be found])])
  AC_CHECK_HEADER([GL/osmesa.h], [],
    [AC_MSG_FAILURE( [--with-osmesa was given, but osmesa.h could not be found])])
  HAVE_OSMESA='yes'
  AC_DEFINE([HAVE_OSMESA],1,[Building with the OSMesa video driver]) ], [

dnl Otherwise we want a real GL library (unless we're on darwin, in which case it's already
dnl taken care of above).
   if test "x$APPLE_BUILD" != 'xyes'; then
      AC_CHECK_LIB(GL, glVertex3f, [], [
          AC_MSG_FAILURE( ["The OpenGL library (libGL.so) could not be found, but is required."])])
      AC_CHECK_HEADER([GL/gl.h], [], [
          AC_MSG_FAILURE( ["The OpenGL header files (eg GL/gl.h) could not be found, but are required."])])
   fi

dnl Now work out how to get from the UI to GL - this is usually the painful part.
   if test "x$HAVE_GTK_X11" = "xyes"; then
      if test "x$APPLE_BUILD" = "xyes"; then
         LIBS="$LIBS -L/usr/X11/lib -lGL"
      fi
      AC_CHECK_FUNC(glXQueryVersion, [
         HAVE_GLX='yes'
         AC_DEFINE([HAVE_GLX], 1, [Have GLX support]) ] )
   elif test "x$HAVE_GTK_OSX" = "xyes"; then
      AC_CHECK_FUNC(NSOpenGLGetVersion, [
         HAVE_NSGL='yes'
         AC_DEFINE([HAVE_NSGL],1, [Have NSOpenGL support]) ] )
   fi
      
])


dnl OK, now decide which video driver(s) we can build
if test "x$HAVE_OSMESA" = "x" -a "x$HAVE_GLX" = "x" -a "x$HAVE_NSGL" = "x"; then
   echo "Warning: Building with no video support"
fi

AM_CONDITIONAL(VIDEO_OSMESA, [test "x$HAVE_OSMESA" = "xyes"])
AM_CONDITIONAL(VIDEO_GLX, [test "x$HAVE_GLX" = "xyes"])
AM_CONDITIONAL(VIDEO_NSGL, [test "x$HAVE_NSGL" = "xyes"])

dnl Check for optional (but highly desireable) OpenGL features
AC_CHECK_FUNC(glGenFramebuffersEXT, [ AC_DEFINE([HAVE_OPENGL_FBO],1,[Have EXT_framebuffer_object support]) ], [])
AC_CHECK_FUNC(glCreateShader, [ AC_DEFINE([HAVE_OPENGL_SHADER],1,[Have 2.0 shader support]) ], [])
AC_CHECK_FUNC(glCreateShaderObjectARB, [ AC_DEFINE([HAVE_OPENGL_SHADER_ARB],1,[Have ARB shader support]) ], [])


dnl Check for a supported cpu target for translation purposes
case $host_cpu in
    i386|i486|i586|i686)
	SH4_TRANSLATOR="x86"
        AC_DEFINE_UNQUOTED(SH4_TRANSLATOR,[TARGET_X86], [SH4 Translator to use (if any)] );;
    x86_64)
	SH4_TRANSLATOR="x86_64"
        AC_DEFINE_UNQUOTED(SH4_TRANSLATOR,[TARGET_X86_64], [SH4 Translator to use (if any)] );;
    *)
	echo "Warning: No translator available for $host. Building emulation core only";;
esac
AM_CONDITIONAL(BUILD_SH4X86, [test "$SH4_TRANSLATOR" = "x86" -o "$SH4_TRANSLATOR" = "x86_64"])
AM_CONDITIONAL(BUILD_X86_64, [test "$SH4_TRANSLATOR" = "x86_64"])

dnl ------------------ Optional driver support -------------------
dnl Check for pulseaudio
PKG_CHECK_MODULES(PULSE, [libpulse-simple], [
     HAVE_PULSE='yes'
     AC_DEFINE([HAVE_PULSE],1,[Have pulseaudio support]) ], [true])
AM_CONDITIONAL( AUDIO_PULSE, [test "$HAVE_PULSE" = 'yes'] )

dnl Check for esound
PKG_CHECK_MODULES(ESOUND, [esound], [ 
     HAVE_ESOUND='yes'
     AC_DEFINE([HAVE_ESOUND],1,[Have esound support]) ], [true])
AM_CONDITIONAL( AUDIO_ESOUND, [test "$HAVE_ESOUND" = 'yes'] )

dnl Check for alsa support
PKG_CHECK_MODULES(ALSA, [alsa], [ 
     HAVE_ALSA='yes'
     AC_DEFINE([HAVE_ALSA],1,[Have alsa support]) ], [true])
AM_CONDITIONAL( AUDIO_ALSA, [test "$HAVE_ALSA" = 'yes'] )

if test "x$HAVE_ESOUND" = "x" -a "x$HAVE_ALSA" = "x" -a "x$HAVE_PULSE" = "x"; then
   echo "Warning: Building without audio support"
fi

dnl Check for linux cdrom device support
AC_CHECK_HEADER([linux/cdrom.h], [HAVE_LINUX_CDROM_H=yes], [
    echo "Linux CDROM support not found, building without it."]  )
AM_CONDITIONAL(CDROM_LINUX, [test "$HAVE_LINUX_CDROM_H" = "yes"])

AC_CHECK_HEADER([linux/joystick.h], [
    HAVE_LINUX_JOYSTICK_H=yes
    AC_DEFINE([HAVE_LINUX_JOYSTICK], 1, [Have linux joystick support]) ], 
  [ echo "Linux Joystick support not found, building without it."] )
AM_CONDITIONAL(JOY_LINUX, [test "$HAVE_LINUX_JOYSTICK_H" = "yes"])

dnl Check for cross-compiler availability - needed for system tests
AC_PATH_PROG(SHCC, [sh-elf-gcc])
AC_PATH_PROG(SHLD, [sh-elf-ld])
AC_PATH_PROG(SHOBJCOPY, [sh-elf-objcopy])
AC_PATH_PROG(ARMCC, [arm-elf-gcc])
AC_PATH_PROG(ARMLD, [arm-elf-ld])
AC_PATH_PROG(ARMOBJCOPY, [arm-elf-objcopy])

if test "x$SHCC" = "x" -o "x$SHLD" = "x" -o "x$SHOBJCOPY" = "x"; then
  BUILD_SH="no"
  echo "Warning: SH4 cross-compiler not found, system tests will be disabled."
else
  BUILD_SH="yes"
fi
if test "x$ARMCC" = "x" -o "x$ARMLD" = "x" -o "x$ARMOBJCOPY" = "x"; then
  BUILD_ARM="no"
  echo "Warning: ARM cross-compiler not found, AICA tests will be disabled."
else
  BUILD_ARM="yes"
fi
AM_CONDITIONAL(BUILD_SYSTEST, [test "$BUILD_SH" = "yes"])
AM_CONDITIONAL(BUILD_ARMTEST, [test "$BUILD_ARM" = "yes"])


dnl ----------------------- All done, finish up -----------------------
GETTEXT_PACKAGE=lxdream
AC_SUBST(GETTEXT_PACKAGE)
AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE,"$GETTEXT_PACKAGE",[translation domain])

dnl Add the languages which your application supports here.
ALL_LINGUAS="de es it pt_BR"
AM_GLIB_GNU_GETTEXT

AC_OUTPUT([
Makefile
src/Makefile
po/Makefile.in
test/Makefile
])

